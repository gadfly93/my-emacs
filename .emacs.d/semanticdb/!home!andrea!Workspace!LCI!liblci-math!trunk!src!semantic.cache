;; Object src/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "src/"
  :tables (list 
   (semanticdb-table "vector.c"
    :major-mode 'c-mode
    :tags 
        '( ("lci-math.h" include nil nil [202 223])
            ("stdlib.h" include (:system-flag t) nil [225 244])
            ("LCI_MATH_DEFINE_VECTOR" variable (:constant-flag t) nil [254 276])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("sum" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [5065 5090])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("apply" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [5065 5090])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("apply_arg" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [5065 5090])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("apply_varg" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [5065 5090])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("apply_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [5065 5090])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("apply_arg_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [5065 5090])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("apply_varg_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [5065 5090])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("sum" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [5091 5116])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("apply" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [5091 5116])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("apply_arg" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [5091 5116])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("apply_varg" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [5091 5116])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("apply_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [5091 5116])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("apply_arg_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [5091 5116])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("apply_varg_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [5091 5116])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("sum" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [5117 5142])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("apply" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [5117 5142])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("apply_arg" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [5117 5142])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("apply_varg" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [5117 5142])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("apply_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [5117 5142])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("apply_arg_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [5117 5142])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("apply_varg_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [5117 5142])
            ("LCI_MATH_DEFINE_VECTOR_UNARY_OP" variable (:constant-flag t) nil [5183 5214])
            ("LCI_MATH_DEFINE_VECTOR_UNARY_FUNC" variable (:constant-flag t) nil [6599 6632])
            ("LCI_MATH_DEFINE_VECTOR_BINARY_OP" variable (:constant-flag t) nil [8031 8063])
            ("LCI_MATH_DEFINE_VECTOR_BINARY_FUNC" variable (:constant-flag t) nil [11254 11288])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("add" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14505 14551])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("add" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14505 14551])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("add" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14505 14551])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("add" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14505 14551])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("sub" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14552 14598])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("sub" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14552 14598])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("sub" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14552 14598])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("sub" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14552 14598])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("mul" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14599 14645])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("mul" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14599 14645])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("mul" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14599 14645])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("mul" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14599 14645])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("div" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14646 14692])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("div" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14646 14692])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("div" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14646 14692])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("div" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14646 14692])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("mod" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14693 14739])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("mod" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14693 14739])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("mod" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14693 14739])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("mod" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14693 14739])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("neg" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14740 14785])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("neg" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14740 14785])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("bitand" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14786 14835])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("bitand" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14786 14835])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("bitand" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14786 14835])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("bitand" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14786 14835])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("bitor" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14836 14884])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("bitor" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14836 14884])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("bitor" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14836 14884])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("bitor" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14836 14884])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("xor" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14885 14931])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("xor" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14885 14931])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("xor" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14885 14931])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("xor" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14885 14931])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("compl" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14932 14979])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("compl" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14932 14979])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("shl" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14980 15027])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("shl" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14980 15027])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("shl" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14980 15027])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("shl" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [14980 15027])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("shr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15028 15075])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("shr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15028 15075])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("shr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15028 15075])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("shr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15028 15075])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("and" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15076 15123])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("and" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15076 15123])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("and" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15076 15123])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("and" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15076 15123])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("or" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15124 15170])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("or" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15124 15170])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("or" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15124 15170])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("or" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15124 15170])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("not" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15171 15216])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("not" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15171 15216])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_eq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15217 15267])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_eq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15217 15267])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_eq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15217 15267])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_eq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15217 15267])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_ne" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15268 15318])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_ne" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15268 15318])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_ne" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15268 15318])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_ne" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15268 15318])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_lt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15319 15368])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_lt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15319 15368])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_lt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15319 15368])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_lt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15319 15368])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_le" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15369 15419])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_le" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15369 15419])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_le" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15369 15419])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_le" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15369 15419])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_gt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15420 15469])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_gt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15420 15469])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_gt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15420 15469])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_gt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15420 15469])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_ge" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15470 15520])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_ge" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15470 15520])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_ge" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15470 15520])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_ge" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15470 15520])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("min" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15521 15571])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("min" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15521 15571])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("min" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15521 15571])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("min" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15521 15571])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("max" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15572 15622])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("max" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15572 15622])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("max" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15572 15622])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("max" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15572 15622])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("abs" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15623 15672])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("abs" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15623 15672])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("add" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15674 15720])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("add" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15674 15720])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("add" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15674 15720])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("add" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15674 15720])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("sub" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15721 15767])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("sub" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15721 15767])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("sub" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15721 15767])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("sub" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15721 15767])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("mul" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15768 15814])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("mul" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15768 15814])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("mul" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15768 15814])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("mul" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15768 15814])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("div" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15815 15861])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("div" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15815 15861])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("div" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15815 15861])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("div" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15815 15861])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("mod" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15862 15913])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("mod" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15862 15913])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("mod" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15862 15913])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("mod" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15862 15913])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("neg" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15914 15959])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("neg" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15914 15959])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("and" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15960 16007])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("and" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15960 16007])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("and" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15960 16007])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("and" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [15960 16007])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("or" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16008 16054])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("or" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16008 16054])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("or" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16008 16054])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("or" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16008 16054])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("not" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16055 16100])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("not" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16055 16100])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_eq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16101 16151])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_eq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16101 16151])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_eq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16101 16151])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_eq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16101 16151])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_ne" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16152 16202])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_ne" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16152 16202])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_ne" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16152 16202])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_ne" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16152 16202])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_lt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16203 16252])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_lt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16203 16252])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_lt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16203 16252])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_lt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16203 16252])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_le" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16253 16303])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_le" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16253 16303])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_le" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16253 16303])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_le" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16253 16303])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_gt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16304 16353])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_gt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16304 16353])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_gt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16304 16353])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_gt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16304 16353])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_ge" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16354 16404])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_ge" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16354 16404])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_ge" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16354 16404])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_ge" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16354 16404])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("min" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16405 16456])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("min" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16405 16456])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("min" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16405 16456])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("min" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16405 16456])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("max" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16457 16508])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("max" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16457 16508])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("max" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16457 16508])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("max" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16457 16508])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("abs" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16509 16559])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("abs" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16509 16559])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("exp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16560 16609])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("exp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16560 16609])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("log" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16610 16659])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("log" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16610 16659])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("log10" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16660 16713])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("log10" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16660 16713])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("sqrt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16714 16765])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("sqrt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16714 16765])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("pow" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16766 16816])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("pow" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16766 16816])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("pow" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16766 16816])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("pow" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16766 16816])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("sin" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16817 16866])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("sin" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16817 16866])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cos" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16867 16916])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cos" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16867 16916])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("tan" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16917 16966])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("tan" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16917 16966])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("asin" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16967 17018])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("asin" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [16967 17018])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("acos" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17019 17070])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("acos" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17019 17070])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("atan" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17071 17122])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("atan" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17071 17122])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("atan2" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17123 17177])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("atan2" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17123 17177])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("atan2" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17123 17177])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("atan2" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17123 17177])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("sinh" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17178 17229])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("sinh" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17178 17229])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cosh" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17230 17281])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cosh" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17230 17281])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("tanh" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17282 17333])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("tanh" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17282 17333])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("asinh" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17334 17387])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("asinh" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17334 17387])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("acosh" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17388 17441])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("acosh" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17388 17441])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("atanh" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17442 17495])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("atanh" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17442 17495])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("erf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17496 17545])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("erf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17496 17545])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("erfc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17546 17597])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("erfc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17546 17597])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("ceil" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17598 17649])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("ceil" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17598 17649])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("floor" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17650 17703])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("floor" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17650 17703])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("round" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17704 17757])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("round" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17704 17757])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("isfinite" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17758 17817])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("isfinite" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17758 17817])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("isinf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17818 17871])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("isinf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17818 17871])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("isnan" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17872 17925])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("isnan" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17872 17925])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("isnormal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17926 17985])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("isnormal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17926 17985])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("add" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17987 18033])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("add" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17987 18033])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("add" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17987 18033])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("add" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [17987 18033])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("sub" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18034 18080])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("sub" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18034 18080])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("sub" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18034 18080])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("sub" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18034 18080])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("mul" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18081 18127])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("mul" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18081 18127])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("mul" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18081 18127])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("mul" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18081 18127])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("div" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18128 18174])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("div" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18128 18174])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("div" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18128 18174])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("div" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18128 18174])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("neg" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18175 18220])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("neg" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18175 18220])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_eq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18221 18271])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_eq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18221 18271])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_eq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18221 18271])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_eq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18221 18271])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_ne" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18272 18322])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_ne" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18272 18322])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_ne" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18272 18322])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cmp_ne" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18272 18322])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("abs" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18323 18373])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("abs" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18323 18373])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("arg" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18374 18424])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("arg" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18374 18424])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("imag" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18425 18477])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("imag" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18425 18477])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("real" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18478 18530])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("real" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18478 18530])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("conj" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18531 18582])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("conj" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18531 18582])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("proj" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18583 18635])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("proj" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18583 18635])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("exp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18636 18686])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("exp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18636 18686])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("log" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18687 18737])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("log" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18687 18737])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("sqrt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18795 18847])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("sqrt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18795 18847])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("pow" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18848 18899])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("pow" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18848 18899])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("pow" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18848 18899])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("pow" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in_c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18848 18899])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("sin" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18900 18950])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("sin" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18900 18950])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cos" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18951 19001])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cos" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [18951 19001])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("tan" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [19002 19052])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("tan" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [19002 19052])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("asin" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [19053 19105])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("asin" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [19053 19105])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("acos" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [19106 19158])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("acos" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [19106 19158])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("atan" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [19159 19211])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("atan" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [19159 19211])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("sinh" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [19212 19264])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("sinh" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [19212 19264])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cosh" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [19265 19317])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("cosh" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [19265 19317])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("tanh" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [19318 19370])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("tanh" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [19318 19370])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("asinh" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [19371 19425])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("asinh" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [19371 19425])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("acosh" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [19426 19480])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("acosh" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [19426 19480])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("atanh" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [19481 19535])
            ("LCI_DATA_VECTOR_NAME" function
               (:arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("atanh" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type ("LCI_API" type (:type "class") nil nil))
                nil [19481 19535]))          
    :file "vector.c"
    :pointmax 19808
    :fsize 19807
    :lastmodtime '(21351 15210 260971 617000)
    :unmatched-syntax '((semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "catanh" 19528 . 19534) ("result_type" symbol "c" 19525 . 19526) ("type" symbol "c" 19522 . 19523) ("name" symbol "atanh" 19515 . 19520)))) 19481 . 19535) (VOID "void" 19481 . 19535) (symbol "LCI_MATH_EXPORT" 19481 . 19535) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "catanh" 19528 . 19534) ("result_type" symbol "c" 19525 . 19526) ("type" symbol "c" 19522 . 19523) ("name" symbol "atanh" 19515 . 19520)))) 19481 . 19535) (punctuation "*" 19481 . 19535) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "catanh" 19528 . 19534) ("result_type" symbol "c" 19525 . 19526) ("type" symbol "c" 19522 . 19523) ("name" symbol "atanh" 19515 . 19520)))) 19481 . 19535) (symbol "LCI_DATA_VECTOR_TYPE" 19481 . 19535) (symbol "LCI_MATH_EXPORT" 19481 . 19535) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "cacosh" 19473 . 19479) ("result_type" symbol "c" 19470 . 19471) ("type" symbol "c" 19467 . 19468) ("name" symbol "acosh" 19460 . 19465)))) 19426 . 19480) (VOID "void" 19426 . 19480) (symbol "LCI_MATH_EXPORT" 19426 . 19480) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "cacosh" 19473 . 19479) ("result_type" symbol "c" 19470 . 19471) ("type" symbol "c" 19467 . 19468) ("name" symbol "acosh" 19460 . 19465)))) 19426 . 19480) (punctuation "*" 19426 . 19480) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "cacosh" 19473 . 19479) ("result_type" symbol "c" 19470 . 19471) ("type" symbol "c" 19467 . 19468) ("name" symbol "acosh" 19460 . 19465)))) 19426 . 19480) (symbol "LCI_DATA_VECTOR_TYPE" 19426 . 19480) (symbol "LCI_MATH_EXPORT" 19426 . 19480) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "casinh" 19418 . 19424) ("result_type" symbol "c" 19415 . 19416) ("type" symbol "c" 19412 . 19413) ("name" symbol "asinh" 19405 . 19410)))) 19371 . 19425) (VOID "void" 19371 . 19425) (symbol "LCI_MATH_EXPORT" 19371 . 19425) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "casinh" 19418 . 19424) ("result_type" symbol "c" 19415 . 19416) ("type" symbol "c" 19412 . 19413) ("name" symbol "asinh" 19405 . 19410)))) 19371 . 19425) (punctuation "*" 19371 . 19425) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "casinh" 19418 . 19424) ("result_type" symbol "c" 19415 . 19416) ("type" symbol "c" 19412 . 19413) ("name" symbol "asinh" 19405 . 19410)))) 19371 . 19425) (symbol "LCI_DATA_VECTOR_TYPE" 19371 . 19425) (symbol "LCI_MATH_EXPORT" 19371 . 19425) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "ctanh" 19364 . 19369) ("result_type" symbol "c" 19361 . 19362) ("type" symbol "c" 19358 . 19359) ("name" symbol "tanh" 19352 . 19356)))) 19318 . 19370) (VOID "void" 19318 . 19370) (symbol "LCI_MATH_EXPORT" 19318 . 19370) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "ctanh" 19364 . 19369) ("result_type" symbol "c" 19361 . 19362) ("type" symbol "c" 19358 . 19359) ("name" symbol "tanh" 19352 . 19356)))) 19318 . 19370) (punctuation "*" 19318 . 19370) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "ctanh" 19364 . 19369) ("result_type" symbol "c" 19361 . 19362) ("type" symbol "c" 19358 . 19359) ("name" symbol "tanh" 19352 . 19356)))) 19318 . 19370) (symbol "LCI_DATA_VECTOR_TYPE" 19318 . 19370) (symbol "LCI_MATH_EXPORT" 19318 . 19370) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "ccosh" 19311 . 19316) ("result_type" symbol "c" 19308 . 19309) ("type" symbol "c" 19305 . 19306) ("name" symbol "cosh" 19299 . 19303)))) 19265 . 19317) (VOID "void" 19265 . 19317) (symbol "LCI_MATH_EXPORT" 19265 . 19317) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "ccosh" 19311 . 19316) ("result_type" symbol "c" 19308 . 19309) ("type" symbol "c" 19305 . 19306) ("name" symbol "cosh" 19299 . 19303)))) 19265 . 19317) (punctuation "*" 19265 . 19317) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "ccosh" 19311 . 19316) ("result_type" symbol "c" 19308 . 19309) ("type" symbol "c" 19305 . 19306) ("name" symbol "cosh" 19299 . 19303)))) 19265 . 19317) (symbol "LCI_DATA_VECTOR_TYPE" 19265 . 19317) (symbol "LCI_MATH_EXPORT" 19265 . 19317) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "csinh" 19258 . 19263) ("result_type" symbol "c" 19255 . 19256) ("type" symbol "c" 19252 . 19253) ("name" symbol "sinh" 19246 . 19250)))) 19212 . 19264) (VOID "void" 19212 . 19264) (symbol "LCI_MATH_EXPORT" 19212 . 19264) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "csinh" 19258 . 19263) ("result_type" symbol "c" 19255 . 19256) ("type" symbol "c" 19252 . 19253) ("name" symbol "sinh" 19246 . 19250)))) 19212 . 19264) (punctuation "*" 19212 . 19264) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "csinh" 19258 . 19263) ("result_type" symbol "c" 19255 . 19256) ("type" symbol "c" 19252 . 19253) ("name" symbol "sinh" 19246 . 19250)))) 19212 . 19264) (symbol "LCI_DATA_VECTOR_TYPE" 19212 . 19264) (symbol "LCI_MATH_EXPORT" 19212 . 19264) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "catan" 19205 . 19210) ("result_type" symbol "c" 19202 . 19203) ("type" symbol "c" 19199 . 19200) ("name" symbol "atan" 19193 . 19197)))) 19159 . 19211) (VOID "void" 19159 . 19211) (symbol "LCI_MATH_EXPORT" 19159 . 19211) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "catan" 19205 . 19210) ("result_type" symbol "c" 19202 . 19203) ("type" symbol "c" 19199 . 19200) ("name" symbol "atan" 19193 . 19197)))) 19159 . 19211) (punctuation "*" 19159 . 19211) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "catan" 19205 . 19210) ("result_type" symbol "c" 19202 . 19203) ("type" symbol "c" 19199 . 19200) ("name" symbol "atan" 19193 . 19197)))) 19159 . 19211) (symbol "LCI_DATA_VECTOR_TYPE" 19159 . 19211) (symbol "LCI_MATH_EXPORT" 19159 . 19211) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "cacos" 19152 . 19157) ("result_type" symbol "c" 19149 . 19150) ("type" symbol "c" 19146 . 19147) ("name" symbol "acos" 19140 . 19144)))) 19106 . 19158) (VOID "void" 19106 . 19158) (symbol "LCI_MATH_EXPORT" 19106 . 19158) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "cacos" 19152 . 19157) ("result_type" symbol "c" 19149 . 19150) ("type" symbol "c" 19146 . 19147) ("name" symbol "acos" 19140 . 19144)))) 19106 . 19158) (punctuation "*" 19106 . 19158) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "cacos" 19152 . 19157) ("result_type" symbol "c" 19149 . 19150) ("type" symbol "c" 19146 . 19147) ("name" symbol "acos" 19140 . 19144)))) 19106 . 19158) (symbol "LCI_DATA_VECTOR_TYPE" 19106 . 19158) (symbol "LCI_MATH_EXPORT" 19106 . 19158) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "casin" 19099 . 19104) ("result_type" symbol "c" 19096 . 19097) ("type" symbol "c" 19093 . 19094) ("name" symbol "asin" 19087 . 19091)))) 19053 . 19105) (VOID "void" 19053 . 19105) (symbol "LCI_MATH_EXPORT" 19053 . 19105) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "casin" 19099 . 19104) ("result_type" symbol "c" 19096 . 19097) ("type" symbol "c" 19093 . 19094) ("name" symbol "asin" 19087 . 19091)))) 19053 . 19105) (punctuation "*" 19053 . 19105) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "casin" 19099 . 19104) ("result_type" symbol "c" 19096 . 19097) ("type" symbol "c" 19093 . 19094) ("name" symbol "asin" 19087 . 19091)))) 19053 . 19105) (symbol "LCI_DATA_VECTOR_TYPE" 19053 . 19105) (symbol "LCI_MATH_EXPORT" 19053 . 19105) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "ctan" 19047 . 19051) ("result_type" symbol "c" 19044 . 19045) ("type" symbol "c" 19041 . 19042) ("name" symbol "tan" 19036 . 19039)))) 19002 . 19052) (VOID "void" 19002 . 19052) (symbol "LCI_MATH_EXPORT" 19002 . 19052) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "ctan" 19047 . 19051) ("result_type" symbol "c" 19044 . 19045) ("type" symbol "c" 19041 . 19042) ("name" symbol "tan" 19036 . 19039)))) 19002 . 19052) (punctuation "*" 19002 . 19052) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "ctan" 19047 . 19051) ("result_type" symbol "c" 19044 . 19045) ("type" symbol "c" 19041 . 19042) ("name" symbol "tan" 19036 . 19039)))) 19002 . 19052) (symbol "LCI_DATA_VECTOR_TYPE" 19002 . 19052) (symbol "LCI_MATH_EXPORT" 19002 . 19052) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "ccos" 18996 . 19000) ("result_type" symbol "c" 18993 . 18994) ("type" symbol "c" 18990 . 18991) ("name" symbol "cos" 18985 . 18988)))) 18951 . 19001) (VOID "void" 18951 . 19001) (symbol "LCI_MATH_EXPORT" 18951 . 19001) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "ccos" 18996 . 19000) ("result_type" symbol "c" 18993 . 18994) ("type" symbol "c" 18990 . 18991) ("name" symbol "cos" 18985 . 18988)))) 18951 . 19001) (punctuation "*" 18951 . 19001) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "ccos" 18996 . 19000) ("result_type" symbol "c" 18993 . 18994) ("type" symbol "c" 18990 . 18991) ("name" symbol "cos" 18985 . 18988)))) 18951 . 19001) (symbol "LCI_DATA_VECTOR_TYPE" 18951 . 19001) (symbol "LCI_MATH_EXPORT" 18951 . 19001) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "csin" 18945 . 18949) ("result_type" symbol "c" 18942 . 18943) ("type" symbol "c" 18939 . 18940) ("name" symbol "sin" 18934 . 18937)))) 18900 . 18950) (VOID "void" 18900 . 18950) (symbol "LCI_MATH_EXPORT" 18900 . 18950) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "csin" 18945 . 18949) ("result_type" symbol "c" 18942 . 18943) ("type" symbol "c" 18939 . 18940) ("name" symbol "sin" 18934 . 18937)))) 18900 . 18950) (punctuation "*" 18900 . 18950) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "csin" 18945 . 18949) ("result_type" symbol "c" 18942 . 18943) ("type" symbol "c" 18939 . 18940) ("name" symbol "sin" 18934 . 18937)))) 18900 . 18950) (symbol "LCI_DATA_VECTOR_TYPE" 18900 . 18950) (symbol "LCI_MATH_EXPORT" 18900 . 18950) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = func(aptr[i], b); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = func(*aptr, b); \\
		} \\
	}" 0 1 (macros (("func" symbol "cpow" 18894 . 18898) ("result_type" symbol "c" 18891 . 18892) ("type" symbol "c" 18888 . 18889) ("name" symbol "pow" 18883 . 18886)))) 18848 . 18899) (VOID "void" 18848 . 18899) (symbol "LCI_MATH_EXPORT" 18848 . 18899) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(aptr[i], b); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = func(*aptr, b); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "cpow" 18894 . 18898) ("result_type" symbol "c" 18891 . 18892) ("type" symbol "c" 18888 . 18889) ("name" symbol "pow" 18883 . 18886)))) 18848 . 18899) (punctuation "*" 18848 . 18899) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "cpow" 18894 . 18898) ("result_type" symbol "c" 18891 . 18892) ("type" symbol "c" 18888 . 18889) ("name" symbol "pow" 18883 . 18886)))) 18848 . 18899) (symbol "LCI_DATA_VECTOR_TYPE" 18848 . 18899) (symbol "LCI_MATH_EXPORT" 18848 . 18899) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = func(aptr[i], bptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = func(*aptr, *bptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "cpow" 18894 . 18898) ("result_type" symbol "c" 18891 . 18892) ("type" symbol "c" 18888 . 18889) ("name" symbol "pow" 18883 . 18886)))) 18848 . 18899) (VOID "void" 18848 . 18899) (symbol "LCI_MATH_EXPORT" 18848 . 18899) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(aptr[i], bptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = func(*aptr, *bptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "cpow" 18894 . 18898) ("result_type" symbol "c" 18891 . 18892) ("type" symbol "c" 18888 . 18889) ("name" symbol "pow" 18883 . 18886)))) 18848 . 18899) (punctuation "*" 18848 . 18899) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "cpow" 18894 . 18898) ("result_type" symbol "c" 18891 . 18892) ("type" symbol "c" 18888 . 18889) ("name" symbol "pow" 18883 . 18886)))) 18848 . 18899) (symbol "LCI_DATA_VECTOR_TYPE" 18848 . 18899) (symbol "LCI_MATH_EXPORT" 18848 . 18899) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "csqrt" 18841 . 18846) ("result_type" symbol "c" 18838 . 18839) ("type" symbol "c" 18835 . 18836) ("name" symbol "sqrt" 18829 . 18833)))) 18795 . 18847) (VOID "void" 18795 . 18847) (symbol "LCI_MATH_EXPORT" 18795 . 18847) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "csqrt" 18841 . 18846) ("result_type" symbol "c" 18838 . 18839) ("type" symbol "c" 18835 . 18836) ("name" symbol "sqrt" 18829 . 18833)))) 18795 . 18847) (punctuation "*" 18795 . 18847) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "csqrt" 18841 . 18846) ("result_type" symbol "c" 18838 . 18839) ("type" symbol "c" 18835 . 18836) ("name" symbol "sqrt" 18829 . 18833)))) 18795 . 18847) (symbol "LCI_DATA_VECTOR_TYPE" 18795 . 18847) (symbol "LCI_MATH_EXPORT" 18795 . 18847) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "clog" 18732 . 18736) ("result_type" symbol "c" 18729 . 18730) ("type" symbol "c" 18726 . 18727) ("name" symbol "log" 18721 . 18724)))) 18687 . 18737) (VOID "void" 18687 . 18737) (symbol "LCI_MATH_EXPORT" 18687 . 18737) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "clog" 18732 . 18736) ("result_type" symbol "c" 18729 . 18730) ("type" symbol "c" 18726 . 18727) ("name" symbol "log" 18721 . 18724)))) 18687 . 18737) (punctuation "*" 18687 . 18737) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "clog" 18732 . 18736) ("result_type" symbol "c" 18729 . 18730) ("type" symbol "c" 18726 . 18727) ("name" symbol "log" 18721 . 18724)))) 18687 . 18737) (symbol "LCI_DATA_VECTOR_TYPE" 18687 . 18737) (symbol "LCI_MATH_EXPORT" 18687 . 18737) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "cexp" 18681 . 18685) ("result_type" symbol "c" 18678 . 18679) ("type" symbol "c" 18675 . 18676) ("name" symbol "exp" 18670 . 18673)))) 18636 . 18686) (VOID "void" 18636 . 18686) (symbol "LCI_MATH_EXPORT" 18636 . 18686) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "cexp" 18681 . 18685) ("result_type" symbol "c" 18678 . 18679) ("type" symbol "c" 18675 . 18676) ("name" symbol "exp" 18670 . 18673)))) 18636 . 18686) (punctuation "*" 18636 . 18686) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "cexp" 18681 . 18685) ("result_type" symbol "c" 18678 . 18679) ("type" symbol "c" 18675 . 18676) ("name" symbol "exp" 18670 . 18673)))) 18636 . 18686) (symbol "LCI_DATA_VECTOR_TYPE" 18636 . 18686) (symbol "LCI_MATH_EXPORT" 18636 . 18686) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "cproj" 18629 . 18634) ("result_type" symbol "f" 18626 . 18627) ("type" symbol "c" 18623 . 18624) ("name" symbol "proj" 18617 . 18621)))) 18583 . 18635) (VOID "void" 18583 . 18635) (symbol "LCI_MATH_EXPORT" 18583 . 18635) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "cproj" 18629 . 18634) ("result_type" symbol "f" 18626 . 18627) ("type" symbol "c" 18623 . 18624) ("name" symbol "proj" 18617 . 18621)))) 18583 . 18635) (punctuation "*" 18583 . 18635) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "cproj" 18629 . 18634) ("result_type" symbol "f" 18626 . 18627) ("type" symbol "c" 18623 . 18624) ("name" symbol "proj" 18617 . 18621)))) 18583 . 18635) (symbol "LCI_DATA_VECTOR_TYPE" 18583 . 18635) (symbol "LCI_MATH_EXPORT" 18583 . 18635) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "conj" 18577 . 18581) ("result_type" symbol "c" 18574 . 18575) ("type" symbol "c" 18571 . 18572) ("name" symbol "conj" 18565 . 18569)))) 18531 . 18582) (VOID "void" 18531 . 18582) (symbol "LCI_MATH_EXPORT" 18531 . 18582) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "conj" 18577 . 18581) ("result_type" symbol "c" 18574 . 18575) ("type" symbol "c" 18571 . 18572) ("name" symbol "conj" 18565 . 18569)))) 18531 . 18582) (punctuation "*" 18531 . 18582) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "conj" 18577 . 18581) ("result_type" symbol "c" 18574 . 18575) ("type" symbol "c" 18571 . 18572) ("name" symbol "conj" 18565 . 18569)))) 18531 . 18582) (symbol "LCI_DATA_VECTOR_TYPE" 18531 . 18582) (symbol "LCI_MATH_EXPORT" 18531 . 18582) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "creal" 18524 . 18529) ("result_type" symbol "f" 18521 . 18522) ("type" symbol "c" 18518 . 18519) ("name" symbol "real" 18512 . 18516)))) 18478 . 18530) (VOID "void" 18478 . 18530) (symbol "LCI_MATH_EXPORT" 18478 . 18530) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "creal" 18524 . 18529) ("result_type" symbol "f" 18521 . 18522) ("type" symbol "c" 18518 . 18519) ("name" symbol "real" 18512 . 18516)))) 18478 . 18530) (punctuation "*" 18478 . 18530) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "creal" 18524 . 18529) ("result_type" symbol "f" 18521 . 18522) ("type" symbol "c" 18518 . 18519) ("name" symbol "real" 18512 . 18516)))) 18478 . 18530) (symbol "LCI_DATA_VECTOR_TYPE" 18478 . 18530) (symbol "LCI_MATH_EXPORT" 18478 . 18530) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "cimag" 18471 . 18476) ("result_type" symbol "f" 18468 . 18469) ("type" symbol "c" 18465 . 18466) ("name" symbol "imag" 18459 . 18463)))) 18425 . 18477) (VOID "void" 18425 . 18477) (symbol "LCI_MATH_EXPORT" 18425 . 18477) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "cimag" 18471 . 18476) ("result_type" symbol "f" 18468 . 18469) ("type" symbol "c" 18465 . 18466) ("name" symbol "imag" 18459 . 18463)))) 18425 . 18477) (punctuation "*" 18425 . 18477) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "cimag" 18471 . 18476) ("result_type" symbol "f" 18468 . 18469) ("type" symbol "c" 18465 . 18466) ("name" symbol "imag" 18459 . 18463)))) 18425 . 18477) (symbol "LCI_DATA_VECTOR_TYPE" 18425 . 18477) (symbol "LCI_MATH_EXPORT" 18425 . 18477) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "carg" 18419 . 18423) ("result_type" symbol "f" 18416 . 18417) ("type" symbol "c" 18413 . 18414) ("name" symbol "arg" 18408 . 18411)))) 18374 . 18424) (VOID "void" 18374 . 18424) (symbol "LCI_MATH_EXPORT" 18374 . 18424) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "carg" 18419 . 18423) ("result_type" symbol "f" 18416 . 18417) ("type" symbol "c" 18413 . 18414) ("name" symbol "arg" 18408 . 18411)))) 18374 . 18424) (punctuation "*" 18374 . 18424) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "carg" 18419 . 18423) ("result_type" symbol "f" 18416 . 18417) ("type" symbol "c" 18413 . 18414) ("name" symbol "arg" 18408 . 18411)))) 18374 . 18424) (symbol "LCI_DATA_VECTOR_TYPE" 18374 . 18424) (symbol "LCI_MATH_EXPORT" 18374 . 18424) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "cabs" 18368 . 18372) ("result_type" symbol "f" 18365 . 18366) ("type" symbol "c" 18362 . 18363) ("name" symbol "abs" 18357 . 18360)))) 18323 . 18373) (VOID "void" 18323 . 18373) (symbol "LCI_MATH_EXPORT" 18323 . 18373) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "cabs" 18368 . 18372) ("result_type" symbol "f" 18365 . 18366) ("type" symbol "c" 18362 . 18363) ("name" symbol "abs" 18357 . 18360)))) 18323 . 18373) (punctuation "*" 18323 . 18373) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "cabs" 18368 . 18372) ("result_type" symbol "f" 18365 . 18366) ("type" symbol "c" 18362 . 18363) ("name" symbol "abs" 18357 . 18360)))) 18323 . 18373) (symbol "LCI_DATA_VECTOR_TYPE" 18323 . 18373) (symbol "LCI_MATH_EXPORT" 18323 . 18373) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 18316 . 18317) ("type" symbol "c" 18313 . 18314) ("name" symbol "cmp_ne" 18305 . 18311)))) 18272 . 18322) (VOID "void" 18272 . 18322) (symbol "LCI_MATH_EXPORT" 18272 . 18322) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 18316 . 18317) ("type" symbol "c" 18313 . 18314) ("name" symbol "cmp_ne" 18305 . 18311)))) 18272 . 18322) (punctuation "*" 18272 . 18322) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 18316 . 18317) ("type" symbol "c" 18313 . 18314) ("name" symbol "cmp_ne" 18305 . 18311)))) 18272 . 18322) (symbol "LCI_DATA_VECTOR_TYPE" 18272 . 18322) (symbol "LCI_MATH_EXPORT" 18272 . 18322) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 18316 . 18317) ("type" symbol "c" 18313 . 18314) ("name" symbol "cmp_ne" 18305 . 18311)))) 18272 . 18322) (VOID "void" 18272 . 18322) (symbol "LCI_MATH_EXPORT" 18272 . 18322) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 18316 . 18317) ("type" symbol "c" 18313 . 18314) ("name" symbol "cmp_ne" 18305 . 18311)))) 18272 . 18322) (punctuation "*" 18272 . 18322) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 18316 . 18317) ("type" symbol "c" 18313 . 18314) ("name" symbol "cmp_ne" 18305 . 18311)))) 18272 . 18322) (symbol "LCI_DATA_VECTOR_TYPE" 18272 . 18322) (symbol "LCI_MATH_EXPORT" 18272 . 18322) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 18265 . 18266) ("type" symbol "c" 18262 . 18263) ("name" symbol "cmp_eq" 18254 . 18260)))) 18221 . 18271) (VOID "void" 18221 . 18271) (symbol "LCI_MATH_EXPORT" 18221 . 18271) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 18265 . 18266) ("type" symbol "c" 18262 . 18263) ("name" symbol "cmp_eq" 18254 . 18260)))) 18221 . 18271) (punctuation "*" 18221 . 18271) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 18265 . 18266) ("type" symbol "c" 18262 . 18263) ("name" symbol "cmp_eq" 18254 . 18260)))) 18221 . 18271) (symbol "LCI_DATA_VECTOR_TYPE" 18221 . 18271) (symbol "LCI_MATH_EXPORT" 18221 . 18271) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 18265 . 18266) ("type" symbol "c" 18262 . 18263) ("name" symbol "cmp_eq" 18254 . 18260)))) 18221 . 18271) (VOID "void" 18221 . 18271) (symbol "LCI_MATH_EXPORT" 18221 . 18271) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 18265 . 18266) ("type" symbol "c" 18262 . 18263) ("name" symbol "cmp_eq" 18254 . 18260)))) 18221 . 18271) (punctuation "*" 18221 . 18271) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 18265 . 18266) ("type" symbol "c" 18262 . 18263) ("name" symbol "cmp_eq" 18254 . 18260)))) 18221 . 18271) (symbol "LCI_DATA_VECTOR_TYPE" 18221 . 18271) (symbol "LCI_MATH_EXPORT" 18221 . 18271) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = op vptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = op *vptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "c" 18215 . 18216) ("type" symbol "c" 18212 . 18213) ("name" symbol "neg" 18207 . 18210)))) 18175 . 18220) (VOID "void" 18175 . 18220) (symbol "LCI_MATH_EXPORT" 18175 . 18220) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = op vptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = op *vptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "c" 18215 . 18216) ("type" symbol "c" 18212 . 18213) ("name" symbol "neg" 18207 . 18210)))) 18175 . 18220) (punctuation "*" 18175 . 18220) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "c" 18215 . 18216) ("type" symbol "c" 18212 . 18213) ("name" symbol "neg" 18207 . 18210)))) 18175 . 18220) (symbol "LCI_DATA_VECTOR_TYPE" 18175 . 18220) (symbol "LCI_MATH_EXPORT" 18175 . 18220) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "c" 18169 . 18170) ("type" symbol "c" 18166 . 18167) ("name" symbol "div" 18161 . 18164)))) 18128 . 18174) (VOID "void" 18128 . 18174) (symbol "LCI_MATH_EXPORT" 18128 . 18174) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "c" 18169 . 18170) ("type" symbol "c" 18166 . 18167) ("name" symbol "div" 18161 . 18164)))) 18128 . 18174) (punctuation "*" 18128 . 18174) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "c" 18169 . 18170) ("type" symbol "c" 18166 . 18167) ("name" symbol "div" 18161 . 18164)))) 18128 . 18174) (symbol "LCI_DATA_VECTOR_TYPE" 18128 . 18174) (symbol "LCI_MATH_EXPORT" 18128 . 18174) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "c" 18169 . 18170) ("type" symbol "c" 18166 . 18167) ("name" symbol "div" 18161 . 18164)))) 18128 . 18174) (VOID "void" 18128 . 18174) (symbol "LCI_MATH_EXPORT" 18128 . 18174) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "c" 18169 . 18170) ("type" symbol "c" 18166 . 18167) ("name" symbol "div" 18161 . 18164)))) 18128 . 18174) (punctuation "*" 18128 . 18174) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "c" 18169 . 18170) ("type" symbol "c" 18166 . 18167) ("name" symbol "div" 18161 . 18164)))) 18128 . 18174) (symbol "LCI_DATA_VECTOR_TYPE" 18128 . 18174) (symbol "LCI_MATH_EXPORT" 18128 . 18174) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "c" 18122 . 18123) ("type" symbol "c" 18119 . 18120) ("name" symbol "mul" 18114 . 18117)))) 18081 . 18127) (VOID "void" 18081 . 18127) (symbol "LCI_MATH_EXPORT" 18081 . 18127) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "c" 18122 . 18123) ("type" symbol "c" 18119 . 18120) ("name" symbol "mul" 18114 . 18117)))) 18081 . 18127) (punctuation "*" 18081 . 18127) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "c" 18122 . 18123) ("type" symbol "c" 18119 . 18120) ("name" symbol "mul" 18114 . 18117)))) 18081 . 18127) (symbol "LCI_DATA_VECTOR_TYPE" 18081 . 18127) (symbol "LCI_MATH_EXPORT" 18081 . 18127) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "c" 18122 . 18123) ("type" symbol "c" 18119 . 18120) ("name" symbol "mul" 18114 . 18117)))) 18081 . 18127) (VOID "void" 18081 . 18127) (symbol "LCI_MATH_EXPORT" 18081 . 18127) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "c" 18122 . 18123) ("type" symbol "c" 18119 . 18120) ("name" symbol "mul" 18114 . 18117)))) 18081 . 18127) (punctuation "*" 18081 . 18127) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "c" 18122 . 18123) ("type" symbol "c" 18119 . 18120) ("name" symbol "mul" 18114 . 18117)))) 18081 . 18127) (symbol "LCI_DATA_VECTOR_TYPE" 18081 . 18127) (symbol "LCI_MATH_EXPORT" 18081 . 18127) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "c" 18075 . 18076) ("type" symbol "c" 18072 . 18073) ("name" symbol "sub" 18067 . 18070)))) 18034 . 18080) (VOID "void" 18034 . 18080) (symbol "LCI_MATH_EXPORT" 18034 . 18080) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "c" 18075 . 18076) ("type" symbol "c" 18072 . 18073) ("name" symbol "sub" 18067 . 18070)))) 18034 . 18080) (punctuation "*" 18034 . 18080) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "c" 18075 . 18076) ("type" symbol "c" 18072 . 18073) ("name" symbol "sub" 18067 . 18070)))) 18034 . 18080) (symbol "LCI_DATA_VECTOR_TYPE" 18034 . 18080) (symbol "LCI_MATH_EXPORT" 18034 . 18080) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "c" 18075 . 18076) ("type" symbol "c" 18072 . 18073) ("name" symbol "sub" 18067 . 18070)))) 18034 . 18080) (VOID "void" 18034 . 18080) (symbol "LCI_MATH_EXPORT" 18034 . 18080) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "c" 18075 . 18076) ("type" symbol "c" 18072 . 18073) ("name" symbol "sub" 18067 . 18070)))) 18034 . 18080) (punctuation "*" 18034 . 18080) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "c" 18075 . 18076) ("type" symbol "c" 18072 . 18073) ("name" symbol "sub" 18067 . 18070)))) 18034 . 18080) (symbol "LCI_DATA_VECTOR_TYPE" 18034 . 18080) (symbol "LCI_MATH_EXPORT" 18034 . 18080) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "c" 18028 . 18029) ("type" symbol "c" 18025 . 18026) ("name" symbol "add" 18020 . 18023)))) 17987 . 18033) (VOID "void" 17987 . 18033) (symbol "LCI_MATH_EXPORT" 17987 . 18033) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "c" 18028 . 18029) ("type" symbol "c" 18025 . 18026) ("name" symbol "add" 18020 . 18023)))) 17987 . 18033) (punctuation "*" 17987 . 18033) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "c" 18028 . 18029) ("type" symbol "c" 18025 . 18026) ("name" symbol "add" 18020 . 18023)))) 17987 . 18033) (symbol "LCI_DATA_VECTOR_TYPE" 17987 . 18033) (symbol "LCI_MATH_EXPORT" 17987 . 18033) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "c" 18028 . 18029) ("type" symbol "c" 18025 . 18026) ("name" symbol "add" 18020 . 18023)))) 17987 . 18033) (VOID "void" 17987 . 18033) (symbol "LCI_MATH_EXPORT" 17987 . 18033) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "c" 18028 . 18029) ("type" symbol "c" 18025 . 18026) ("name" symbol "add" 18020 . 18023)))) 17987 . 18033) (punctuation "*" 17987 . 18033) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "c" 18028 . 18029) ("type" symbol "c" 18025 . 18026) ("name" symbol "add" 18020 . 18023)))) 17987 . 18033) (symbol "LCI_DATA_VECTOR_TYPE" 17987 . 18033) (symbol "LCI_MATH_EXPORT" 17987 . 18033) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "isnormal" 17976 . 17984) ("result_type" symbol "i" 17973 . 17974) ("type" symbol "f" 17970 . 17971) ("name" symbol "isnormal" 17960 . 17968)))) 17926 . 17985) (VOID "void" 17926 . 17985) (symbol "LCI_MATH_EXPORT" 17926 . 17985) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "isnormal" 17976 . 17984) ("result_type" symbol "i" 17973 . 17974) ("type" symbol "f" 17970 . 17971) ("name" symbol "isnormal" 17960 . 17968)))) 17926 . 17985) (punctuation "*" 17926 . 17985) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "isnormal" 17976 . 17984) ("result_type" symbol "i" 17973 . 17974) ("type" symbol "f" 17970 . 17971) ("name" symbol "isnormal" 17960 . 17968)))) 17926 . 17985) (symbol "LCI_DATA_VECTOR_TYPE" 17926 . 17985) (symbol "LCI_MATH_EXPORT" 17926 . 17985) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "isnan" 17919 . 17924) ("result_type" symbol "i" 17916 . 17917) ("type" symbol "f" 17913 . 17914) ("name" symbol "isnan" 17906 . 17911)))) 17872 . 17925) (VOID "void" 17872 . 17925) (symbol "LCI_MATH_EXPORT" 17872 . 17925) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "isnan" 17919 . 17924) ("result_type" symbol "i" 17916 . 17917) ("type" symbol "f" 17913 . 17914) ("name" symbol "isnan" 17906 . 17911)))) 17872 . 17925) (punctuation "*" 17872 . 17925) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "isnan" 17919 . 17924) ("result_type" symbol "i" 17916 . 17917) ("type" symbol "f" 17913 . 17914) ("name" symbol "isnan" 17906 . 17911)))) 17872 . 17925) (symbol "LCI_DATA_VECTOR_TYPE" 17872 . 17925) (symbol "LCI_MATH_EXPORT" 17872 . 17925) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "isinf" 17865 . 17870) ("result_type" symbol "i" 17862 . 17863) ("type" symbol "f" 17859 . 17860) ("name" symbol "isinf" 17852 . 17857)))) 17818 . 17871) (VOID "void" 17818 . 17871) (symbol "LCI_MATH_EXPORT" 17818 . 17871) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "isinf" 17865 . 17870) ("result_type" symbol "i" 17862 . 17863) ("type" symbol "f" 17859 . 17860) ("name" symbol "isinf" 17852 . 17857)))) 17818 . 17871) (punctuation "*" 17818 . 17871) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "isinf" 17865 . 17870) ("result_type" symbol "i" 17862 . 17863) ("type" symbol "f" 17859 . 17860) ("name" symbol "isinf" 17852 . 17857)))) 17818 . 17871) (symbol "LCI_DATA_VECTOR_TYPE" 17818 . 17871) (symbol "LCI_MATH_EXPORT" 17818 . 17871) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "isfinite" 17808 . 17816) ("result_type" symbol "i" 17805 . 17806) ("type" symbol "f" 17802 . 17803) ("name" symbol "isfinite" 17792 . 17800)))) 17758 . 17817) (VOID "void" 17758 . 17817) (symbol "LCI_MATH_EXPORT" 17758 . 17817) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "isfinite" 17808 . 17816) ("result_type" symbol "i" 17805 . 17806) ("type" symbol "f" 17802 . 17803) ("name" symbol "isfinite" 17792 . 17800)))) 17758 . 17817) (punctuation "*" 17758 . 17817) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "isfinite" 17808 . 17816) ("result_type" symbol "i" 17805 . 17806) ("type" symbol "f" 17802 . 17803) ("name" symbol "isfinite" 17792 . 17800)))) 17758 . 17817) (symbol "LCI_DATA_VECTOR_TYPE" 17758 . 17817) (symbol "LCI_MATH_EXPORT" 17758 . 17817) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "round" 17751 . 17756) ("result_type" symbol "i" 17748 . 17749) ("type" symbol "f" 17745 . 17746) ("name" symbol "round" 17738 . 17743)))) 17704 . 17757) (VOID "void" 17704 . 17757) (symbol "LCI_MATH_EXPORT" 17704 . 17757) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "round" 17751 . 17756) ("result_type" symbol "i" 17748 . 17749) ("type" symbol "f" 17745 . 17746) ("name" symbol "round" 17738 . 17743)))) 17704 . 17757) (punctuation "*" 17704 . 17757) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "round" 17751 . 17756) ("result_type" symbol "i" 17748 . 17749) ("type" symbol "f" 17745 . 17746) ("name" symbol "round" 17738 . 17743)))) 17704 . 17757) (symbol "LCI_DATA_VECTOR_TYPE" 17704 . 17757) (symbol "LCI_MATH_EXPORT" 17704 . 17757) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "floor" 17697 . 17702) ("result_type" symbol "i" 17694 . 17695) ("type" symbol "f" 17691 . 17692) ("name" symbol "floor" 17684 . 17689)))) 17650 . 17703) (VOID "void" 17650 . 17703) (symbol "LCI_MATH_EXPORT" 17650 . 17703) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "floor" 17697 . 17702) ("result_type" symbol "i" 17694 . 17695) ("type" symbol "f" 17691 . 17692) ("name" symbol "floor" 17684 . 17689)))) 17650 . 17703) (punctuation "*" 17650 . 17703) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "floor" 17697 . 17702) ("result_type" symbol "i" 17694 . 17695) ("type" symbol "f" 17691 . 17692) ("name" symbol "floor" 17684 . 17689)))) 17650 . 17703) (symbol "LCI_DATA_VECTOR_TYPE" 17650 . 17703) (symbol "LCI_MATH_EXPORT" 17650 . 17703) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "ceil" 17644 . 17648) ("result_type" symbol "i" 17641 . 17642) ("type" symbol "f" 17638 . 17639) ("name" symbol "ceil" 17632 . 17636)))) 17598 . 17649) (VOID "void" 17598 . 17649) (symbol "LCI_MATH_EXPORT" 17598 . 17649) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "ceil" 17644 . 17648) ("result_type" symbol "i" 17641 . 17642) ("type" symbol "f" 17638 . 17639) ("name" symbol "ceil" 17632 . 17636)))) 17598 . 17649) (punctuation "*" 17598 . 17649) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "ceil" 17644 . 17648) ("result_type" symbol "i" 17641 . 17642) ("type" symbol "f" 17638 . 17639) ("name" symbol "ceil" 17632 . 17636)))) 17598 . 17649) (symbol "LCI_DATA_VECTOR_TYPE" 17598 . 17649) (symbol "LCI_MATH_EXPORT" 17598 . 17649) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "erfc" 17592 . 17596) ("result_type" symbol "f" 17589 . 17590) ("type" symbol "f" 17586 . 17587) ("name" symbol "erfc" 17580 . 17584)))) 17546 . 17597) (VOID "void" 17546 . 17597) (symbol "LCI_MATH_EXPORT" 17546 . 17597) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "erfc" 17592 . 17596) ("result_type" symbol "f" 17589 . 17590) ("type" symbol "f" 17586 . 17587) ("name" symbol "erfc" 17580 . 17584)))) 17546 . 17597) (punctuation "*" 17546 . 17597) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "erfc" 17592 . 17596) ("result_type" symbol "f" 17589 . 17590) ("type" symbol "f" 17586 . 17587) ("name" symbol "erfc" 17580 . 17584)))) 17546 . 17597) (symbol "LCI_DATA_VECTOR_TYPE" 17546 . 17597) (symbol "LCI_MATH_EXPORT" 17546 . 17597) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "erf" 17541 . 17544) ("result_type" symbol "f" 17538 . 17539) ("type" symbol "f" 17535 . 17536) ("name" symbol "erf" 17530 . 17533)))) 17496 . 17545) (VOID "void" 17496 . 17545) (symbol "LCI_MATH_EXPORT" 17496 . 17545) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "erf" 17541 . 17544) ("result_type" symbol "f" 17538 . 17539) ("type" symbol "f" 17535 . 17536) ("name" symbol "erf" 17530 . 17533)))) 17496 . 17545) (punctuation "*" 17496 . 17545) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "erf" 17541 . 17544) ("result_type" symbol "f" 17538 . 17539) ("type" symbol "f" 17535 . 17536) ("name" symbol "erf" 17530 . 17533)))) 17496 . 17545) (symbol "LCI_DATA_VECTOR_TYPE" 17496 . 17545) (symbol "LCI_MATH_EXPORT" 17496 . 17545) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "atanh" 17489 . 17494) ("result_type" symbol "f" 17486 . 17487) ("type" symbol "f" 17483 . 17484) ("name" symbol "atanh" 17476 . 17481)))) 17442 . 17495) (VOID "void" 17442 . 17495) (symbol "LCI_MATH_EXPORT" 17442 . 17495) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "atanh" 17489 . 17494) ("result_type" symbol "f" 17486 . 17487) ("type" symbol "f" 17483 . 17484) ("name" symbol "atanh" 17476 . 17481)))) 17442 . 17495) (punctuation "*" 17442 . 17495) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "atanh" 17489 . 17494) ("result_type" symbol "f" 17486 . 17487) ("type" symbol "f" 17483 . 17484) ("name" symbol "atanh" 17476 . 17481)))) 17442 . 17495) (symbol "LCI_DATA_VECTOR_TYPE" 17442 . 17495) (symbol "LCI_MATH_EXPORT" 17442 . 17495) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "acosh" 17435 . 17440) ("result_type" symbol "f" 17432 . 17433) ("type" symbol "f" 17429 . 17430) ("name" symbol "acosh" 17422 . 17427)))) 17388 . 17441) (VOID "void" 17388 . 17441) (symbol "LCI_MATH_EXPORT" 17388 . 17441) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "acosh" 17435 . 17440) ("result_type" symbol "f" 17432 . 17433) ("type" symbol "f" 17429 . 17430) ("name" symbol "acosh" 17422 . 17427)))) 17388 . 17441) (punctuation "*" 17388 . 17441) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "acosh" 17435 . 17440) ("result_type" symbol "f" 17432 . 17433) ("type" symbol "f" 17429 . 17430) ("name" symbol "acosh" 17422 . 17427)))) 17388 . 17441) (symbol "LCI_DATA_VECTOR_TYPE" 17388 . 17441) (symbol "LCI_MATH_EXPORT" 17388 . 17441) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "asinh" 17381 . 17386) ("result_type" symbol "f" 17378 . 17379) ("type" symbol "f" 17375 . 17376) ("name" symbol "asinh" 17368 . 17373)))) 17334 . 17387) (VOID "void" 17334 . 17387) (symbol "LCI_MATH_EXPORT" 17334 . 17387) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "asinh" 17381 . 17386) ("result_type" symbol "f" 17378 . 17379) ("type" symbol "f" 17375 . 17376) ("name" symbol "asinh" 17368 . 17373)))) 17334 . 17387) (punctuation "*" 17334 . 17387) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "asinh" 17381 . 17386) ("result_type" symbol "f" 17378 . 17379) ("type" symbol "f" 17375 . 17376) ("name" symbol "asinh" 17368 . 17373)))) 17334 . 17387) (symbol "LCI_DATA_VECTOR_TYPE" 17334 . 17387) (symbol "LCI_MATH_EXPORT" 17334 . 17387) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "tanh" 17328 . 17332) ("result_type" symbol "f" 17325 . 17326) ("type" symbol "f" 17322 . 17323) ("name" symbol "tanh" 17316 . 17320)))) 17282 . 17333) (VOID "void" 17282 . 17333) (symbol "LCI_MATH_EXPORT" 17282 . 17333) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "tanh" 17328 . 17332) ("result_type" symbol "f" 17325 . 17326) ("type" symbol "f" 17322 . 17323) ("name" symbol "tanh" 17316 . 17320)))) 17282 . 17333) (punctuation "*" 17282 . 17333) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "tanh" 17328 . 17332) ("result_type" symbol "f" 17325 . 17326) ("type" symbol "f" 17322 . 17323) ("name" symbol "tanh" 17316 . 17320)))) 17282 . 17333) (symbol "LCI_DATA_VECTOR_TYPE" 17282 . 17333) (symbol "LCI_MATH_EXPORT" 17282 . 17333) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "cosh" 17276 . 17280) ("result_type" symbol "f" 17273 . 17274) ("type" symbol "f" 17270 . 17271) ("name" symbol "cosh" 17264 . 17268)))) 17230 . 17281) (VOID "void" 17230 . 17281) (symbol "LCI_MATH_EXPORT" 17230 . 17281) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "cosh" 17276 . 17280) ("result_type" symbol "f" 17273 . 17274) ("type" symbol "f" 17270 . 17271) ("name" symbol "cosh" 17264 . 17268)))) 17230 . 17281) (punctuation "*" 17230 . 17281) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "cosh" 17276 . 17280) ("result_type" symbol "f" 17273 . 17274) ("type" symbol "f" 17270 . 17271) ("name" symbol "cosh" 17264 . 17268)))) 17230 . 17281) (symbol "LCI_DATA_VECTOR_TYPE" 17230 . 17281) (symbol "LCI_MATH_EXPORT" 17230 . 17281) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "sinh" 17224 . 17228) ("result_type" symbol "f" 17221 . 17222) ("type" symbol "f" 17218 . 17219) ("name" symbol "sinh" 17212 . 17216)))) 17178 . 17229) (VOID "void" 17178 . 17229) (symbol "LCI_MATH_EXPORT" 17178 . 17229) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "sinh" 17224 . 17228) ("result_type" symbol "f" 17221 . 17222) ("type" symbol "f" 17218 . 17219) ("name" symbol "sinh" 17212 . 17216)))) 17178 . 17229) (punctuation "*" 17178 . 17229) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "sinh" 17224 . 17228) ("result_type" symbol "f" 17221 . 17222) ("type" symbol "f" 17218 . 17219) ("name" symbol "sinh" 17212 . 17216)))) 17178 . 17229) (symbol "LCI_DATA_VECTOR_TYPE" 17178 . 17229) (symbol "LCI_MATH_EXPORT" 17178 . 17229) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = func(aptr[i], b); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = func(*aptr, b); \\
		} \\
	}" 0 1 (macros (("func" symbol "atan2" 17171 . 17176) ("result_type" symbol "f" 17168 . 17169) ("type" symbol "f" 17165 . 17166) ("name" symbol "atan2" 17158 . 17163)))) 17123 . 17177) (VOID "void" 17123 . 17177) (symbol "LCI_MATH_EXPORT" 17123 . 17177) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(aptr[i], b); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = func(*aptr, b); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "atan2" 17171 . 17176) ("result_type" symbol "f" 17168 . 17169) ("type" symbol "f" 17165 . 17166) ("name" symbol "atan2" 17158 . 17163)))) 17123 . 17177) (punctuation "*" 17123 . 17177) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "atan2" 17171 . 17176) ("result_type" symbol "f" 17168 . 17169) ("type" symbol "f" 17165 . 17166) ("name" symbol "atan2" 17158 . 17163)))) 17123 . 17177) (symbol "LCI_DATA_VECTOR_TYPE" 17123 . 17177) (symbol "LCI_MATH_EXPORT" 17123 . 17177) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = func(aptr[i], bptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = func(*aptr, *bptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "atan2" 17171 . 17176) ("result_type" symbol "f" 17168 . 17169) ("type" symbol "f" 17165 . 17166) ("name" symbol "atan2" 17158 . 17163)))) 17123 . 17177) (VOID "void" 17123 . 17177) (symbol "LCI_MATH_EXPORT" 17123 . 17177) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(aptr[i], bptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = func(*aptr, *bptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "atan2" 17171 . 17176) ("result_type" symbol "f" 17168 . 17169) ("type" symbol "f" 17165 . 17166) ("name" symbol "atan2" 17158 . 17163)))) 17123 . 17177) (punctuation "*" 17123 . 17177) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "atan2" 17171 . 17176) ("result_type" symbol "f" 17168 . 17169) ("type" symbol "f" 17165 . 17166) ("name" symbol "atan2" 17158 . 17163)))) 17123 . 17177) (symbol "LCI_DATA_VECTOR_TYPE" 17123 . 17177) (symbol "LCI_MATH_EXPORT" 17123 . 17177) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "atan" 17117 . 17121) ("result_type" symbol "f" 17114 . 17115) ("type" symbol "f" 17111 . 17112) ("name" symbol "atan" 17105 . 17109)))) 17071 . 17122) (VOID "void" 17071 . 17122) (symbol "LCI_MATH_EXPORT" 17071 . 17122) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "atan" 17117 . 17121) ("result_type" symbol "f" 17114 . 17115) ("type" symbol "f" 17111 . 17112) ("name" symbol "atan" 17105 . 17109)))) 17071 . 17122) (punctuation "*" 17071 . 17122) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "atan" 17117 . 17121) ("result_type" symbol "f" 17114 . 17115) ("type" symbol "f" 17111 . 17112) ("name" symbol "atan" 17105 . 17109)))) 17071 . 17122) (symbol "LCI_DATA_VECTOR_TYPE" 17071 . 17122) (symbol "LCI_MATH_EXPORT" 17071 . 17122) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "acos" 17065 . 17069) ("result_type" symbol "f" 17062 . 17063) ("type" symbol "f" 17059 . 17060) ("name" symbol "acos" 17053 . 17057)))) 17019 . 17070) (VOID "void" 17019 . 17070) (symbol "LCI_MATH_EXPORT" 17019 . 17070) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "acos" 17065 . 17069) ("result_type" symbol "f" 17062 . 17063) ("type" symbol "f" 17059 . 17060) ("name" symbol "acos" 17053 . 17057)))) 17019 . 17070) (punctuation "*" 17019 . 17070) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "acos" 17065 . 17069) ("result_type" symbol "f" 17062 . 17063) ("type" symbol "f" 17059 . 17060) ("name" symbol "acos" 17053 . 17057)))) 17019 . 17070) (symbol "LCI_DATA_VECTOR_TYPE" 17019 . 17070) (symbol "LCI_MATH_EXPORT" 17019 . 17070) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "asin" 17013 . 17017) ("result_type" symbol "f" 17010 . 17011) ("type" symbol "f" 17007 . 17008) ("name" symbol "asin" 17001 . 17005)))) 16967 . 17018) (VOID "void" 16967 . 17018) (symbol "LCI_MATH_EXPORT" 16967 . 17018) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "asin" 17013 . 17017) ("result_type" symbol "f" 17010 . 17011) ("type" symbol "f" 17007 . 17008) ("name" symbol "asin" 17001 . 17005)))) 16967 . 17018) (punctuation "*" 16967 . 17018) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "asin" 17013 . 17017) ("result_type" symbol "f" 17010 . 17011) ("type" symbol "f" 17007 . 17008) ("name" symbol "asin" 17001 . 17005)))) 16967 . 17018) (symbol "LCI_DATA_VECTOR_TYPE" 16967 . 17018) (symbol "LCI_MATH_EXPORT" 16967 . 17018) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "tan" 16962 . 16965) ("result_type" symbol "f" 16959 . 16960) ("type" symbol "f" 16956 . 16957) ("name" symbol "tan" 16951 . 16954)))) 16917 . 16966) (VOID "void" 16917 . 16966) (symbol "LCI_MATH_EXPORT" 16917 . 16966) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "tan" 16962 . 16965) ("result_type" symbol "f" 16959 . 16960) ("type" symbol "f" 16956 . 16957) ("name" symbol "tan" 16951 . 16954)))) 16917 . 16966) (punctuation "*" 16917 . 16966) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "tan" 16962 . 16965) ("result_type" symbol "f" 16959 . 16960) ("type" symbol "f" 16956 . 16957) ("name" symbol "tan" 16951 . 16954)))) 16917 . 16966) (symbol "LCI_DATA_VECTOR_TYPE" 16917 . 16966) (symbol "LCI_MATH_EXPORT" 16917 . 16966) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "cos" 16912 . 16915) ("result_type" symbol "f" 16909 . 16910) ("type" symbol "f" 16906 . 16907) ("name" symbol "cos" 16901 . 16904)))) 16867 . 16916) (VOID "void" 16867 . 16916) (symbol "LCI_MATH_EXPORT" 16867 . 16916) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "cos" 16912 . 16915) ("result_type" symbol "f" 16909 . 16910) ("type" symbol "f" 16906 . 16907) ("name" symbol "cos" 16901 . 16904)))) 16867 . 16916) (punctuation "*" 16867 . 16916) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "cos" 16912 . 16915) ("result_type" symbol "f" 16909 . 16910) ("type" symbol "f" 16906 . 16907) ("name" symbol "cos" 16901 . 16904)))) 16867 . 16916) (symbol "LCI_DATA_VECTOR_TYPE" 16867 . 16916) (symbol "LCI_MATH_EXPORT" 16867 . 16916) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "sin" 16862 . 16865) ("result_type" symbol "f" 16859 . 16860) ("type" symbol "f" 16856 . 16857) ("name" symbol "sin" 16851 . 16854)))) 16817 . 16866) (VOID "void" 16817 . 16866) (symbol "LCI_MATH_EXPORT" 16817 . 16866) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "sin" 16862 . 16865) ("result_type" symbol "f" 16859 . 16860) ("type" symbol "f" 16856 . 16857) ("name" symbol "sin" 16851 . 16854)))) 16817 . 16866) (punctuation "*" 16817 . 16866) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "sin" 16862 . 16865) ("result_type" symbol "f" 16859 . 16860) ("type" symbol "f" 16856 . 16857) ("name" symbol "sin" 16851 . 16854)))) 16817 . 16866) (symbol "LCI_DATA_VECTOR_TYPE" 16817 . 16866) (symbol "LCI_MATH_EXPORT" 16817 . 16866) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = func(aptr[i], b); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = func(*aptr, b); \\
		} \\
	}" 0 1 (macros (("func" symbol "pow" 16812 . 16815) ("result_type" symbol "f" 16809 . 16810) ("type" symbol "f" 16806 . 16807) ("name" symbol "pow" 16801 . 16804)))) 16766 . 16816) (VOID "void" 16766 . 16816) (symbol "LCI_MATH_EXPORT" 16766 . 16816) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(aptr[i], b); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = func(*aptr, b); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "pow" 16812 . 16815) ("result_type" symbol "f" 16809 . 16810) ("type" symbol "f" 16806 . 16807) ("name" symbol "pow" 16801 . 16804)))) 16766 . 16816) (punctuation "*" 16766 . 16816) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "pow" 16812 . 16815) ("result_type" symbol "f" 16809 . 16810) ("type" symbol "f" 16806 . 16807) ("name" symbol "pow" 16801 . 16804)))) 16766 . 16816) (symbol "LCI_DATA_VECTOR_TYPE" 16766 . 16816) (symbol "LCI_MATH_EXPORT" 16766 . 16816) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = func(aptr[i], bptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = func(*aptr, *bptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "pow" 16812 . 16815) ("result_type" symbol "f" 16809 . 16810) ("type" symbol "f" 16806 . 16807) ("name" symbol "pow" 16801 . 16804)))) 16766 . 16816) (VOID "void" 16766 . 16816) (symbol "LCI_MATH_EXPORT" 16766 . 16816) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(aptr[i], bptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = func(*aptr, *bptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "pow" 16812 . 16815) ("result_type" symbol "f" 16809 . 16810) ("type" symbol "f" 16806 . 16807) ("name" symbol "pow" 16801 . 16804)))) 16766 . 16816) (punctuation "*" 16766 . 16816) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "pow" 16812 . 16815) ("result_type" symbol "f" 16809 . 16810) ("type" symbol "f" 16806 . 16807) ("name" symbol "pow" 16801 . 16804)))) 16766 . 16816) (symbol "LCI_DATA_VECTOR_TYPE" 16766 . 16816) (symbol "LCI_MATH_EXPORT" 16766 . 16816) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "sqrt" 16760 . 16764) ("result_type" symbol "f" 16757 . 16758) ("type" symbol "f" 16754 . 16755) ("name" symbol "sqrt" 16748 . 16752)))) 16714 . 16765) (VOID "void" 16714 . 16765) (symbol "LCI_MATH_EXPORT" 16714 . 16765) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "sqrt" 16760 . 16764) ("result_type" symbol "f" 16757 . 16758) ("type" symbol "f" 16754 . 16755) ("name" symbol "sqrt" 16748 . 16752)))) 16714 . 16765) (punctuation "*" 16714 . 16765) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "sqrt" 16760 . 16764) ("result_type" symbol "f" 16757 . 16758) ("type" symbol "f" 16754 . 16755) ("name" symbol "sqrt" 16748 . 16752)))) 16714 . 16765) (symbol "LCI_DATA_VECTOR_TYPE" 16714 . 16765) (symbol "LCI_MATH_EXPORT" 16714 . 16765) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "log10" 16707 . 16712) ("result_type" symbol "f" 16704 . 16705) ("type" symbol "f" 16701 . 16702) ("name" symbol "log10" 16694 . 16699)))) 16660 . 16713) (VOID "void" 16660 . 16713) (symbol "LCI_MATH_EXPORT" 16660 . 16713) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "log10" 16707 . 16712) ("result_type" symbol "f" 16704 . 16705) ("type" symbol "f" 16701 . 16702) ("name" symbol "log10" 16694 . 16699)))) 16660 . 16713) (punctuation "*" 16660 . 16713) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "log10" 16707 . 16712) ("result_type" symbol "f" 16704 . 16705) ("type" symbol "f" 16701 . 16702) ("name" symbol "log10" 16694 . 16699)))) 16660 . 16713) (symbol "LCI_DATA_VECTOR_TYPE" 16660 . 16713) (symbol "LCI_MATH_EXPORT" 16660 . 16713) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "log" 16655 . 16658) ("result_type" symbol "f" 16652 . 16653) ("type" symbol "f" 16649 . 16650) ("name" symbol "log" 16644 . 16647)))) 16610 . 16659) (VOID "void" 16610 . 16659) (symbol "LCI_MATH_EXPORT" 16610 . 16659) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "log" 16655 . 16658) ("result_type" symbol "f" 16652 . 16653) ("type" symbol "f" 16649 . 16650) ("name" symbol "log" 16644 . 16647)))) 16610 . 16659) (punctuation "*" 16610 . 16659) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "log" 16655 . 16658) ("result_type" symbol "f" 16652 . 16653) ("type" symbol "f" 16649 . 16650) ("name" symbol "log" 16644 . 16647)))) 16610 . 16659) (symbol "LCI_DATA_VECTOR_TYPE" 16610 . 16659) (symbol "LCI_MATH_EXPORT" 16610 . 16659) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "exp" 16605 . 16608) ("result_type" symbol "f" 16602 . 16603) ("type" symbol "f" 16599 . 16600) ("name" symbol "exp" 16594 . 16597)))) 16560 . 16609) (VOID "void" 16560 . 16609) (symbol "LCI_MATH_EXPORT" 16560 . 16609) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "exp" 16605 . 16608) ("result_type" symbol "f" 16602 . 16603) ("type" symbol "f" 16599 . 16600) ("name" symbol "exp" 16594 . 16597)))) 16560 . 16609) (punctuation "*" 16560 . 16609) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "exp" 16605 . 16608) ("result_type" symbol "f" 16602 . 16603) ("type" symbol "f" 16599 . 16600) ("name" symbol "exp" 16594 . 16597)))) 16560 . 16609) (symbol "LCI_DATA_VECTOR_TYPE" 16560 . 16609) (symbol "LCI_MATH_EXPORT" 16560 . 16609) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "fabs" 16554 . 16558) ("result_type" symbol "f" 16551 . 16552) ("type" symbol "f" 16548 . 16549) ("name" symbol "abs" 16543 . 16546)))) 16509 . 16559) (VOID "void" 16509 . 16559) (symbol "LCI_MATH_EXPORT" 16509 . 16559) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "fabs" 16554 . 16558) ("result_type" symbol "f" 16551 . 16552) ("type" symbol "f" 16548 . 16549) ("name" symbol "abs" 16543 . 16546)))) 16509 . 16559) (punctuation "*" 16509 . 16559) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "fabs" 16554 . 16558) ("result_type" symbol "f" 16551 . 16552) ("type" symbol "f" 16548 . 16549) ("name" symbol "abs" 16543 . 16546)))) 16509 . 16559) (symbol "LCI_DATA_VECTOR_TYPE" 16509 . 16559) (symbol "LCI_MATH_EXPORT" 16509 . 16559) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = func(aptr[i], b); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = func(*aptr, b); \\
		} \\
	}" 0 1 (macros (("func" symbol "fmax" 16503 . 16507) ("result_type" symbol "f" 16500 . 16501) ("type" symbol "f" 16497 . 16498) ("name" symbol "max" 16492 . 16495)))) 16457 . 16508) (VOID "void" 16457 . 16508) (symbol "LCI_MATH_EXPORT" 16457 . 16508) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(aptr[i], b); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = func(*aptr, b); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "fmax" 16503 . 16507) ("result_type" symbol "f" 16500 . 16501) ("type" symbol "f" 16497 . 16498) ("name" symbol "max" 16492 . 16495)))) 16457 . 16508) (punctuation "*" 16457 . 16508) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "fmax" 16503 . 16507) ("result_type" symbol "f" 16500 . 16501) ("type" symbol "f" 16497 . 16498) ("name" symbol "max" 16492 . 16495)))) 16457 . 16508) (symbol "LCI_DATA_VECTOR_TYPE" 16457 . 16508) (symbol "LCI_MATH_EXPORT" 16457 . 16508) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = func(aptr[i], bptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = func(*aptr, *bptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "fmax" 16503 . 16507) ("result_type" symbol "f" 16500 . 16501) ("type" symbol "f" 16497 . 16498) ("name" symbol "max" 16492 . 16495)))) 16457 . 16508) (VOID "void" 16457 . 16508) (symbol "LCI_MATH_EXPORT" 16457 . 16508) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(aptr[i], bptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = func(*aptr, *bptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "fmax" 16503 . 16507) ("result_type" symbol "f" 16500 . 16501) ("type" symbol "f" 16497 . 16498) ("name" symbol "max" 16492 . 16495)))) 16457 . 16508) (punctuation "*" 16457 . 16508) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "fmax" 16503 . 16507) ("result_type" symbol "f" 16500 . 16501) ("type" symbol "f" 16497 . 16498) ("name" symbol "max" 16492 . 16495)))) 16457 . 16508) (symbol "LCI_DATA_VECTOR_TYPE" 16457 . 16508) (symbol "LCI_MATH_EXPORT" 16457 . 16508) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = func(aptr[i], b); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = func(*aptr, b); \\
		} \\
	}" 0 1 (macros (("func" symbol "fmin" 16451 . 16455) ("result_type" symbol "f" 16448 . 16449) ("type" symbol "f" 16445 . 16446) ("name" symbol "min" 16440 . 16443)))) 16405 . 16456) (VOID "void" 16405 . 16456) (symbol "LCI_MATH_EXPORT" 16405 . 16456) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(aptr[i], b); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = func(*aptr, b); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "fmin" 16451 . 16455) ("result_type" symbol "f" 16448 . 16449) ("type" symbol "f" 16445 . 16446) ("name" symbol "min" 16440 . 16443)))) 16405 . 16456) (punctuation "*" 16405 . 16456) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "fmin" 16451 . 16455) ("result_type" symbol "f" 16448 . 16449) ("type" symbol "f" 16445 . 16446) ("name" symbol "min" 16440 . 16443)))) 16405 . 16456) (symbol "LCI_DATA_VECTOR_TYPE" 16405 . 16456) (symbol "LCI_MATH_EXPORT" 16405 . 16456) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = func(aptr[i], bptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = func(*aptr, *bptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "fmin" 16451 . 16455) ("result_type" symbol "f" 16448 . 16449) ("type" symbol "f" 16445 . 16446) ("name" symbol "min" 16440 . 16443)))) 16405 . 16456) (VOID "void" 16405 . 16456) (symbol "LCI_MATH_EXPORT" 16405 . 16456) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(aptr[i], bptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = func(*aptr, *bptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "fmin" 16451 . 16455) ("result_type" symbol "f" 16448 . 16449) ("type" symbol "f" 16445 . 16446) ("name" symbol "min" 16440 . 16443)))) 16405 . 16456) (punctuation "*" 16405 . 16456) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "fmin" 16451 . 16455) ("result_type" symbol "f" 16448 . 16449) ("type" symbol "f" 16445 . 16446) ("name" symbol "min" 16440 . 16443)))) 16405 . 16456) (symbol "LCI_DATA_VECTOR_TYPE" 16405 . 16456) (symbol "LCI_MATH_EXPORT" 16405 . 16456) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 16398 . 16399) ("type" symbol "f" 16395 . 16396) ("name" symbol "cmp_ge" 16387 . 16393)))) 16354 . 16404) (VOID "void" 16354 . 16404) (symbol "LCI_MATH_EXPORT" 16354 . 16404) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 16398 . 16399) ("type" symbol "f" 16395 . 16396) ("name" symbol "cmp_ge" 16387 . 16393)))) 16354 . 16404) (punctuation "*" 16354 . 16404) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 16398 . 16399) ("type" symbol "f" 16395 . 16396) ("name" symbol "cmp_ge" 16387 . 16393)))) 16354 . 16404) (symbol "LCI_DATA_VECTOR_TYPE" 16354 . 16404) (symbol "LCI_MATH_EXPORT" 16354 . 16404) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 16398 . 16399) ("type" symbol "f" 16395 . 16396) ("name" symbol "cmp_ge" 16387 . 16393)))) 16354 . 16404) (VOID "void" 16354 . 16404) (symbol "LCI_MATH_EXPORT" 16354 . 16404) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 16398 . 16399) ("type" symbol "f" 16395 . 16396) ("name" symbol "cmp_ge" 16387 . 16393)))) 16354 . 16404) (punctuation "*" 16354 . 16404) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 16398 . 16399) ("type" symbol "f" 16395 . 16396) ("name" symbol "cmp_ge" 16387 . 16393)))) 16354 . 16404) (symbol "LCI_DATA_VECTOR_TYPE" 16354 . 16404) (symbol "LCI_MATH_EXPORT" 16354 . 16404) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 16348 . 16349) ("type" symbol "f" 16345 . 16346) ("name" symbol "cmp_gt" 16337 . 16343)))) 16304 . 16353) (VOID "void" 16304 . 16353) (symbol "LCI_MATH_EXPORT" 16304 . 16353) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 16348 . 16349) ("type" symbol "f" 16345 . 16346) ("name" symbol "cmp_gt" 16337 . 16343)))) 16304 . 16353) (punctuation "*" 16304 . 16353) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 16348 . 16349) ("type" symbol "f" 16345 . 16346) ("name" symbol "cmp_gt" 16337 . 16343)))) 16304 . 16353) (symbol "LCI_DATA_VECTOR_TYPE" 16304 . 16353) (symbol "LCI_MATH_EXPORT" 16304 . 16353) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 16348 . 16349) ("type" symbol "f" 16345 . 16346) ("name" symbol "cmp_gt" 16337 . 16343)))) 16304 . 16353) (VOID "void" 16304 . 16353) (symbol "LCI_MATH_EXPORT" 16304 . 16353) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 16348 . 16349) ("type" symbol "f" 16345 . 16346) ("name" symbol "cmp_gt" 16337 . 16343)))) 16304 . 16353) (punctuation "*" 16304 . 16353) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 16348 . 16349) ("type" symbol "f" 16345 . 16346) ("name" symbol "cmp_gt" 16337 . 16343)))) 16304 . 16353) (symbol "LCI_DATA_VECTOR_TYPE" 16304 . 16353) (symbol "LCI_MATH_EXPORT" 16304 . 16353) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 16297 . 16298) ("type" symbol "f" 16294 . 16295) ("name" symbol "cmp_le" 16286 . 16292)))) 16253 . 16303) (VOID "void" 16253 . 16303) (symbol "LCI_MATH_EXPORT" 16253 . 16303) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 16297 . 16298) ("type" symbol "f" 16294 . 16295) ("name" symbol "cmp_le" 16286 . 16292)))) 16253 . 16303) (punctuation "*" 16253 . 16303) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 16297 . 16298) ("type" symbol "f" 16294 . 16295) ("name" symbol "cmp_le" 16286 . 16292)))) 16253 . 16303) (symbol "LCI_DATA_VECTOR_TYPE" 16253 . 16303) (symbol "LCI_MATH_EXPORT" 16253 . 16303) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 16297 . 16298) ("type" symbol "f" 16294 . 16295) ("name" symbol "cmp_le" 16286 . 16292)))) 16253 . 16303) (VOID "void" 16253 . 16303) (symbol "LCI_MATH_EXPORT" 16253 . 16303) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 16297 . 16298) ("type" symbol "f" 16294 . 16295) ("name" symbol "cmp_le" 16286 . 16292)))) 16253 . 16303) (punctuation "*" 16253 . 16303) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 16297 . 16298) ("type" symbol "f" 16294 . 16295) ("name" symbol "cmp_le" 16286 . 16292)))) 16253 . 16303) (symbol "LCI_DATA_VECTOR_TYPE" 16253 . 16303) (symbol "LCI_MATH_EXPORT" 16253 . 16303) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 16247 . 16248) ("type" symbol "f" 16244 . 16245) ("name" symbol "cmp_lt" 16236 . 16242)))) 16203 . 16252) (VOID "void" 16203 . 16252) (symbol "LCI_MATH_EXPORT" 16203 . 16252) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 16247 . 16248) ("type" symbol "f" 16244 . 16245) ("name" symbol "cmp_lt" 16236 . 16242)))) 16203 . 16252) (punctuation "*" 16203 . 16252) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 16247 . 16248) ("type" symbol "f" 16244 . 16245) ("name" symbol "cmp_lt" 16236 . 16242)))) 16203 . 16252) (symbol "LCI_DATA_VECTOR_TYPE" 16203 . 16252) (symbol "LCI_MATH_EXPORT" 16203 . 16252) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 16247 . 16248) ("type" symbol "f" 16244 . 16245) ("name" symbol "cmp_lt" 16236 . 16242)))) 16203 . 16252) (VOID "void" 16203 . 16252) (symbol "LCI_MATH_EXPORT" 16203 . 16252) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 16247 . 16248) ("type" symbol "f" 16244 . 16245) ("name" symbol "cmp_lt" 16236 . 16242)))) 16203 . 16252) (punctuation "*" 16203 . 16252) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 16247 . 16248) ("type" symbol "f" 16244 . 16245) ("name" symbol "cmp_lt" 16236 . 16242)))) 16203 . 16252) (symbol "LCI_DATA_VECTOR_TYPE" 16203 . 16252) (symbol "LCI_MATH_EXPORT" 16203 . 16252) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 16196 . 16197) ("type" symbol "f" 16193 . 16194) ("name" symbol "cmp_ne" 16185 . 16191)))) 16152 . 16202) (VOID "void" 16152 . 16202) (symbol "LCI_MATH_EXPORT" 16152 . 16202) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 16196 . 16197) ("type" symbol "f" 16193 . 16194) ("name" symbol "cmp_ne" 16185 . 16191)))) 16152 . 16202) (punctuation "*" 16152 . 16202) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 16196 . 16197) ("type" symbol "f" 16193 . 16194) ("name" symbol "cmp_ne" 16185 . 16191)))) 16152 . 16202) (symbol "LCI_DATA_VECTOR_TYPE" 16152 . 16202) (symbol "LCI_MATH_EXPORT" 16152 . 16202) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 16196 . 16197) ("type" symbol "f" 16193 . 16194) ("name" symbol "cmp_ne" 16185 . 16191)))) 16152 . 16202) (VOID "void" 16152 . 16202) (symbol "LCI_MATH_EXPORT" 16152 . 16202) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 16196 . 16197) ("type" symbol "f" 16193 . 16194) ("name" symbol "cmp_ne" 16185 . 16191)))) 16152 . 16202) (punctuation "*" 16152 . 16202) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 16196 . 16197) ("type" symbol "f" 16193 . 16194) ("name" symbol "cmp_ne" 16185 . 16191)))) 16152 . 16202) (symbol "LCI_DATA_VECTOR_TYPE" 16152 . 16202) (symbol "LCI_MATH_EXPORT" 16152 . 16202) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 16145 . 16146) ("type" symbol "f" 16142 . 16143) ("name" symbol "cmp_eq" 16134 . 16140)))) 16101 . 16151) (VOID "void" 16101 . 16151) (symbol "LCI_MATH_EXPORT" 16101 . 16151) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 16145 . 16146) ("type" symbol "f" 16142 . 16143) ("name" symbol "cmp_eq" 16134 . 16140)))) 16101 . 16151) (punctuation "*" 16101 . 16151) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 16145 . 16146) ("type" symbol "f" 16142 . 16143) ("name" symbol "cmp_eq" 16134 . 16140)))) 16101 . 16151) (symbol "LCI_DATA_VECTOR_TYPE" 16101 . 16151) (symbol "LCI_MATH_EXPORT" 16101 . 16151) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 16145 . 16146) ("type" symbol "f" 16142 . 16143) ("name" symbol "cmp_eq" 16134 . 16140)))) 16101 . 16151) (VOID "void" 16101 . 16151) (symbol "LCI_MATH_EXPORT" 16101 . 16151) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 16145 . 16146) ("type" symbol "f" 16142 . 16143) ("name" symbol "cmp_eq" 16134 . 16140)))) 16101 . 16151) (punctuation "*" 16101 . 16151) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 16145 . 16146) ("type" symbol "f" 16142 . 16143) ("name" symbol "cmp_eq" 16134 . 16140)))) 16101 . 16151) (symbol "LCI_DATA_VECTOR_TYPE" 16101 . 16151) (symbol "LCI_MATH_EXPORT" 16101 . 16151) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = op vptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = op *vptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 16095 . 16096) ("type" symbol "f" 16092 . 16093) ("name" symbol "not" 16087 . 16090)))) 16055 . 16100) (VOID "void" 16055 . 16100) (symbol "LCI_MATH_EXPORT" 16055 . 16100) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = op vptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = op *vptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 16095 . 16096) ("type" symbol "f" 16092 . 16093) ("name" symbol "not" 16087 . 16090)))) 16055 . 16100) (punctuation "*" 16055 . 16100) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 16095 . 16096) ("type" symbol "f" 16092 . 16093) ("name" symbol "not" 16087 . 16090)))) 16055 . 16100) (symbol "LCI_DATA_VECTOR_TYPE" 16055 . 16100) (symbol "LCI_MATH_EXPORT" 16055 . 16100) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 16048 . 16049) ("type" symbol "f" 16045 . 16046) ("name" symbol "or" 16041 . 16043)))) 16008 . 16054) (VOID "void" 16008 . 16054) (symbol "LCI_MATH_EXPORT" 16008 . 16054) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 16048 . 16049) ("type" symbol "f" 16045 . 16046) ("name" symbol "or" 16041 . 16043)))) 16008 . 16054) (punctuation "*" 16008 . 16054) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 16048 . 16049) ("type" symbol "f" 16045 . 16046) ("name" symbol "or" 16041 . 16043)))) 16008 . 16054) (symbol "LCI_DATA_VECTOR_TYPE" 16008 . 16054) (symbol "LCI_MATH_EXPORT" 16008 . 16054) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 16048 . 16049) ("type" symbol "f" 16045 . 16046) ("name" symbol "or" 16041 . 16043)))) 16008 . 16054) (VOID "void" 16008 . 16054) (symbol "LCI_MATH_EXPORT" 16008 . 16054) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 16048 . 16049) ("type" symbol "f" 16045 . 16046) ("name" symbol "or" 16041 . 16043)))) 16008 . 16054) (punctuation "*" 16008 . 16054) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 16048 . 16049) ("type" symbol "f" 16045 . 16046) ("name" symbol "or" 16041 . 16043)))) 16008 . 16054) (symbol "LCI_DATA_VECTOR_TYPE" 16008 . 16054) (symbol "LCI_MATH_EXPORT" 16008 . 16054) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 16001 . 16002) ("type" symbol "f" 15998 . 15999) ("name" symbol "and" 15993 . 15996)))) 15960 . 16007) (VOID "void" 15960 . 16007) (symbol "LCI_MATH_EXPORT" 15960 . 16007) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 16001 . 16002) ("type" symbol "f" 15998 . 15999) ("name" symbol "and" 15993 . 15996)))) 15960 . 16007) (punctuation "*" 15960 . 16007) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 16001 . 16002) ("type" symbol "f" 15998 . 15999) ("name" symbol "and" 15993 . 15996)))) 15960 . 16007) (symbol "LCI_DATA_VECTOR_TYPE" 15960 . 16007) (symbol "LCI_MATH_EXPORT" 15960 . 16007) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 16001 . 16002) ("type" symbol "f" 15998 . 15999) ("name" symbol "and" 15993 . 15996)))) 15960 . 16007) (VOID "void" 15960 . 16007) (symbol "LCI_MATH_EXPORT" 15960 . 16007) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 16001 . 16002) ("type" symbol "f" 15998 . 15999) ("name" symbol "and" 15993 . 15996)))) 15960 . 16007) (punctuation "*" 15960 . 16007) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 16001 . 16002) ("type" symbol "f" 15998 . 15999) ("name" symbol "and" 15993 . 15996)))) 15960 . 16007) (symbol "LCI_DATA_VECTOR_TYPE" 15960 . 16007) (symbol "LCI_MATH_EXPORT" 15960 . 16007) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = op vptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = op *vptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "f" 15954 . 15955) ("type" symbol "f" 15951 . 15952) ("name" symbol "neg" 15946 . 15949)))) 15914 . 15959) (VOID "void" 15914 . 15959) (symbol "LCI_MATH_EXPORT" 15914 . 15959) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = op vptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = op *vptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "f" 15954 . 15955) ("type" symbol "f" 15951 . 15952) ("name" symbol "neg" 15946 . 15949)))) 15914 . 15959) (punctuation "*" 15914 . 15959) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "f" 15954 . 15955) ("type" symbol "f" 15951 . 15952) ("name" symbol "neg" 15946 . 15949)))) 15914 . 15959) (symbol "LCI_DATA_VECTOR_TYPE" 15914 . 15959) (symbol "LCI_MATH_EXPORT" 15914 . 15959) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = func(aptr[i], b); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = func(*aptr, b); \\
		} \\
	}" 0 1 (macros (("func" symbol "fmod" 15908 . 15912) ("result_type" symbol "f" 15905 . 15906) ("type" symbol "f" 15902 . 15903) ("name" symbol "mod" 15897 . 15900)))) 15862 . 15913) (VOID "void" 15862 . 15913) (symbol "LCI_MATH_EXPORT" 15862 . 15913) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(aptr[i], b); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = func(*aptr, b); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "fmod" 15908 . 15912) ("result_type" symbol "f" 15905 . 15906) ("type" symbol "f" 15902 . 15903) ("name" symbol "mod" 15897 . 15900)))) 15862 . 15913) (punctuation "*" 15862 . 15913) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "fmod" 15908 . 15912) ("result_type" symbol "f" 15905 . 15906) ("type" symbol "f" 15902 . 15903) ("name" symbol "mod" 15897 . 15900)))) 15862 . 15913) (symbol "LCI_DATA_VECTOR_TYPE" 15862 . 15913) (symbol "LCI_MATH_EXPORT" 15862 . 15913) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = func(aptr[i], bptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = func(*aptr, *bptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "fmod" 15908 . 15912) ("result_type" symbol "f" 15905 . 15906) ("type" symbol "f" 15902 . 15903) ("name" symbol "mod" 15897 . 15900)))) 15862 . 15913) (VOID "void" 15862 . 15913) (symbol "LCI_MATH_EXPORT" 15862 . 15913) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(aptr[i], bptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = func(*aptr, *bptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "fmod" 15908 . 15912) ("result_type" symbol "f" 15905 . 15906) ("type" symbol "f" 15902 . 15903) ("name" symbol "mod" 15897 . 15900)))) 15862 . 15913) (punctuation "*" 15862 . 15913) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "fmod" 15908 . 15912) ("result_type" symbol "f" 15905 . 15906) ("type" symbol "f" 15902 . 15903) ("name" symbol "mod" 15897 . 15900)))) 15862 . 15913) (symbol "LCI_DATA_VECTOR_TYPE" 15862 . 15913) (symbol "LCI_MATH_EXPORT" 15862 . 15913) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "f" 15856 . 15857) ("type" symbol "f" 15853 . 15854) ("name" symbol "div" 15848 . 15851)))) 15815 . 15861) (VOID "void" 15815 . 15861) (symbol "LCI_MATH_EXPORT" 15815 . 15861) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "f" 15856 . 15857) ("type" symbol "f" 15853 . 15854) ("name" symbol "div" 15848 . 15851)))) 15815 . 15861) (punctuation "*" 15815 . 15861) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "f" 15856 . 15857) ("type" symbol "f" 15853 . 15854) ("name" symbol "div" 15848 . 15851)))) 15815 . 15861) (symbol "LCI_DATA_VECTOR_TYPE" 15815 . 15861) (symbol "LCI_MATH_EXPORT" 15815 . 15861) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "f" 15856 . 15857) ("type" symbol "f" 15853 . 15854) ("name" symbol "div" 15848 . 15851)))) 15815 . 15861) (VOID "void" 15815 . 15861) (symbol "LCI_MATH_EXPORT" 15815 . 15861) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "f" 15856 . 15857) ("type" symbol "f" 15853 . 15854) ("name" symbol "div" 15848 . 15851)))) 15815 . 15861) (punctuation "*" 15815 . 15861) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "f" 15856 . 15857) ("type" symbol "f" 15853 . 15854) ("name" symbol "div" 15848 . 15851)))) 15815 . 15861) (symbol "LCI_DATA_VECTOR_TYPE" 15815 . 15861) (symbol "LCI_MATH_EXPORT" 15815 . 15861) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "f" 15809 . 15810) ("type" symbol "f" 15806 . 15807) ("name" symbol "mul" 15801 . 15804)))) 15768 . 15814) (VOID "void" 15768 . 15814) (symbol "LCI_MATH_EXPORT" 15768 . 15814) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "f" 15809 . 15810) ("type" symbol "f" 15806 . 15807) ("name" symbol "mul" 15801 . 15804)))) 15768 . 15814) (punctuation "*" 15768 . 15814) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "f" 15809 . 15810) ("type" symbol "f" 15806 . 15807) ("name" symbol "mul" 15801 . 15804)))) 15768 . 15814) (symbol "LCI_DATA_VECTOR_TYPE" 15768 . 15814) (symbol "LCI_MATH_EXPORT" 15768 . 15814) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "f" 15809 . 15810) ("type" symbol "f" 15806 . 15807) ("name" symbol "mul" 15801 . 15804)))) 15768 . 15814) (VOID "void" 15768 . 15814) (symbol "LCI_MATH_EXPORT" 15768 . 15814) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "f" 15809 . 15810) ("type" symbol "f" 15806 . 15807) ("name" symbol "mul" 15801 . 15804)))) 15768 . 15814) (punctuation "*" 15768 . 15814) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "f" 15809 . 15810) ("type" symbol "f" 15806 . 15807) ("name" symbol "mul" 15801 . 15804)))) 15768 . 15814) (symbol "LCI_DATA_VECTOR_TYPE" 15768 . 15814) (symbol "LCI_MATH_EXPORT" 15768 . 15814) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "f" 15762 . 15763) ("type" symbol "f" 15759 . 15760) ("name" symbol "sub" 15754 . 15757)))) 15721 . 15767) (VOID "void" 15721 . 15767) (symbol "LCI_MATH_EXPORT" 15721 . 15767) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "f" 15762 . 15763) ("type" symbol "f" 15759 . 15760) ("name" symbol "sub" 15754 . 15757)))) 15721 . 15767) (punctuation "*" 15721 . 15767) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "f" 15762 . 15763) ("type" symbol "f" 15759 . 15760) ("name" symbol "sub" 15754 . 15757)))) 15721 . 15767) (symbol "LCI_DATA_VECTOR_TYPE" 15721 . 15767) (symbol "LCI_MATH_EXPORT" 15721 . 15767) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "f" 15762 . 15763) ("type" symbol "f" 15759 . 15760) ("name" symbol "sub" 15754 . 15757)))) 15721 . 15767) (VOID "void" 15721 . 15767) (symbol "LCI_MATH_EXPORT" 15721 . 15767) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "f" 15762 . 15763) ("type" symbol "f" 15759 . 15760) ("name" symbol "sub" 15754 . 15757)))) 15721 . 15767) (punctuation "*" 15721 . 15767) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "f" 15762 . 15763) ("type" symbol "f" 15759 . 15760) ("name" symbol "sub" 15754 . 15757)))) 15721 . 15767) (symbol "LCI_DATA_VECTOR_TYPE" 15721 . 15767) (symbol "LCI_MATH_EXPORT" 15721 . 15767) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "f" 15715 . 15716) ("type" symbol "f" 15712 . 15713) ("name" symbol "add" 15707 . 15710)))) 15674 . 15720) (VOID "void" 15674 . 15720) (symbol "LCI_MATH_EXPORT" 15674 . 15720) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "f" 15715 . 15716) ("type" symbol "f" 15712 . 15713) ("name" symbol "add" 15707 . 15710)))) 15674 . 15720) (punctuation "*" 15674 . 15720) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "f" 15715 . 15716) ("type" symbol "f" 15712 . 15713) ("name" symbol "add" 15707 . 15710)))) 15674 . 15720) (symbol "LCI_DATA_VECTOR_TYPE" 15674 . 15720) (symbol "LCI_MATH_EXPORT" 15674 . 15720) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "f" 15715 . 15716) ("type" symbol "f" 15712 . 15713) ("name" symbol "add" 15707 . 15710)))) 15674 . 15720) (VOID "void" 15674 . 15720) (symbol "LCI_MATH_EXPORT" 15674 . 15720) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "f" 15715 . 15716) ("type" symbol "f" 15712 . 15713) ("name" symbol "add" 15707 . 15710)))) 15674 . 15720) (punctuation "*" 15674 . 15720) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "f" 15715 . 15716) ("type" symbol "f" 15712 . 15713) ("name" symbol "add" 15707 . 15710)))) 15674 . 15720) (symbol "LCI_DATA_VECTOR_TYPE" 15674 . 15720) (symbol "LCI_MATH_EXPORT" 15674 . 15720) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "abs" 15668 . 15671) ("result_type" symbol "i" 15665 . 15666) ("type" symbol "i" 15662 . 15663) ("name" symbol "abs" 15657 . 15660)))) 15623 . 15672) (VOID "void" 15623 . 15672) (symbol "LCI_MATH_EXPORT" 15623 . 15672) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "abs" 15668 . 15671) ("result_type" symbol "i" 15665 . 15666) ("type" symbol "i" 15662 . 15663) ("name" symbol "abs" 15657 . 15660)))) 15623 . 15672) (punctuation "*" 15623 . 15672) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "abs" 15668 . 15671) ("result_type" symbol "i" 15665 . 15666) ("type" symbol "i" 15662 . 15663) ("name" symbol "abs" 15657 . 15660)))) 15623 . 15672) (symbol "LCI_DATA_VECTOR_TYPE" 15623 . 15672) (symbol "LCI_MATH_EXPORT" 15623 . 15672) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = func(aptr[i], b); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = func(*aptr, b); \\
		} \\
	}" 0 1 (macros (("func" symbol "MAX" 15618 . 15621) ("result_type" symbol "i" 15615 . 15616) ("type" symbol "i" 15612 . 15613) ("name" symbol "max" 15607 . 15610)))) 15572 . 15622) (VOID "void" 15572 . 15622) (symbol "LCI_MATH_EXPORT" 15572 . 15622) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(aptr[i], b); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = func(*aptr, b); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "MAX" 15618 . 15621) ("result_type" symbol "i" 15615 . 15616) ("type" symbol "i" 15612 . 15613) ("name" symbol "max" 15607 . 15610)))) 15572 . 15622) (punctuation "*" 15572 . 15622) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "MAX" 15618 . 15621) ("result_type" symbol "i" 15615 . 15616) ("type" symbol "i" 15612 . 15613) ("name" symbol "max" 15607 . 15610)))) 15572 . 15622) (symbol "LCI_DATA_VECTOR_TYPE" 15572 . 15622) (symbol "LCI_MATH_EXPORT" 15572 . 15622) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = func(aptr[i], bptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = func(*aptr, *bptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "MAX" 15618 . 15621) ("result_type" symbol "i" 15615 . 15616) ("type" symbol "i" 15612 . 15613) ("name" symbol "max" 15607 . 15610)))) 15572 . 15622) (VOID "void" 15572 . 15622) (symbol "LCI_MATH_EXPORT" 15572 . 15622) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(aptr[i], bptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = func(*aptr, *bptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "MAX" 15618 . 15621) ("result_type" symbol "i" 15615 . 15616) ("type" symbol "i" 15612 . 15613) ("name" symbol "max" 15607 . 15610)))) 15572 . 15622) (punctuation "*" 15572 . 15622) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "MAX" 15618 . 15621) ("result_type" symbol "i" 15615 . 15616) ("type" symbol "i" 15612 . 15613) ("name" symbol "max" 15607 . 15610)))) 15572 . 15622) (symbol "LCI_DATA_VECTOR_TYPE" 15572 . 15622) (symbol "LCI_MATH_EXPORT" 15572 . 15622) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = func(aptr[i], b); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = func(*aptr, b); \\
		} \\
	}" 0 1 (macros (("func" symbol "MIN" 15567 . 15570) ("result_type" symbol "i" 15564 . 15565) ("type" symbol "i" 15561 . 15562) ("name" symbol "min" 15556 . 15559)))) 15521 . 15571) (VOID "void" 15521 . 15571) (symbol "LCI_MATH_EXPORT" 15521 . 15571) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(aptr[i], b); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = func(*aptr, b); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "MIN" 15567 . 15570) ("result_type" symbol "i" 15564 . 15565) ("type" symbol "i" 15561 . 15562) ("name" symbol "min" 15556 . 15559)))) 15521 . 15571) (punctuation "*" 15521 . 15571) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "MIN" 15567 . 15570) ("result_type" symbol "i" 15564 . 15565) ("type" symbol "i" 15561 . 15562) ("name" symbol "min" 15556 . 15559)))) 15521 . 15571) (symbol "LCI_DATA_VECTOR_TYPE" 15521 . 15571) (symbol "LCI_MATH_EXPORT" 15521 . 15571) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = func(aptr[i], bptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = func(*aptr, *bptr); \\
		} \\
	}" 0 1 (macros (("func" symbol "MIN" 15567 . 15570) ("result_type" symbol "i" 15564 . 15565) ("type" symbol "i" 15561 . 15562) ("name" symbol "min" 15556 . 15559)))) 15521 . 15571) (VOID "void" 15521 . 15571) (symbol "LCI_MATH_EXPORT" 15521 . 15571) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(aptr[i], bptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = func(*aptr, *bptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("func" symbol "MIN" 15567 . 15570) ("result_type" symbol "i" 15564 . 15565) ("type" symbol "i" 15561 . 15562) ("name" symbol "min" 15556 . 15559)))) 15521 . 15571) (punctuation "*" 15521 . 15571) (semantic-list #("(result_type)" 0 1 (macros (("func" symbol "MIN" 15567 . 15570) ("result_type" symbol "i" 15564 . 15565) ("type" symbol "i" 15561 . 15562) ("name" symbol "min" 15556 . 15559)))) 15521 . 15571) (symbol "LCI_DATA_VECTOR_TYPE" 15521 . 15571) (symbol "LCI_MATH_EXPORT" 15521 . 15571) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15514 . 15515) ("type" symbol "i" 15511 . 15512) ("name" symbol "cmp_ge" 15503 . 15509)))) 15470 . 15520) (VOID "void" 15470 . 15520) (symbol "LCI_MATH_EXPORT" 15470 . 15520) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15514 . 15515) ("type" symbol "i" 15511 . 15512) ("name" symbol "cmp_ge" 15503 . 15509)))) 15470 . 15520) (punctuation "*" 15470 . 15520) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 15514 . 15515) ("type" symbol "i" 15511 . 15512) ("name" symbol "cmp_ge" 15503 . 15509)))) 15470 . 15520) (symbol "LCI_DATA_VECTOR_TYPE" 15470 . 15520) (symbol "LCI_MATH_EXPORT" 15470 . 15520) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15514 . 15515) ("type" symbol "i" 15511 . 15512) ("name" symbol "cmp_ge" 15503 . 15509)))) 15470 . 15520) (VOID "void" 15470 . 15520) (symbol "LCI_MATH_EXPORT" 15470 . 15520) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15514 . 15515) ("type" symbol "i" 15511 . 15512) ("name" symbol "cmp_ge" 15503 . 15509)))) 15470 . 15520) (punctuation "*" 15470 . 15520) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 15514 . 15515) ("type" symbol "i" 15511 . 15512) ("name" symbol "cmp_ge" 15503 . 15509)))) 15470 . 15520) (symbol "LCI_DATA_VECTOR_TYPE" 15470 . 15520) (symbol "LCI_MATH_EXPORT" 15470 . 15520) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15464 . 15465) ("type" symbol "i" 15461 . 15462) ("name" symbol "cmp_gt" 15453 . 15459)))) 15420 . 15469) (VOID "void" 15420 . 15469) (symbol "LCI_MATH_EXPORT" 15420 . 15469) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15464 . 15465) ("type" symbol "i" 15461 . 15462) ("name" symbol "cmp_gt" 15453 . 15459)))) 15420 . 15469) (punctuation "*" 15420 . 15469) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 15464 . 15465) ("type" symbol "i" 15461 . 15462) ("name" symbol "cmp_gt" 15453 . 15459)))) 15420 . 15469) (symbol "LCI_DATA_VECTOR_TYPE" 15420 . 15469) (symbol "LCI_MATH_EXPORT" 15420 . 15469) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15464 . 15465) ("type" symbol "i" 15461 . 15462) ("name" symbol "cmp_gt" 15453 . 15459)))) 15420 . 15469) (VOID "void" 15420 . 15469) (symbol "LCI_MATH_EXPORT" 15420 . 15469) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15464 . 15465) ("type" symbol "i" 15461 . 15462) ("name" symbol "cmp_gt" 15453 . 15459)))) 15420 . 15469) (punctuation "*" 15420 . 15469) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 15464 . 15465) ("type" symbol "i" 15461 . 15462) ("name" symbol "cmp_gt" 15453 . 15459)))) 15420 . 15469) (symbol "LCI_DATA_VECTOR_TYPE" 15420 . 15469) (symbol "LCI_MATH_EXPORT" 15420 . 15469) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15413 . 15414) ("type" symbol "i" 15410 . 15411) ("name" symbol "cmp_le" 15402 . 15408)))) 15369 . 15419) (VOID "void" 15369 . 15419) (symbol "LCI_MATH_EXPORT" 15369 . 15419) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15413 . 15414) ("type" symbol "i" 15410 . 15411) ("name" symbol "cmp_le" 15402 . 15408)))) 15369 . 15419) (punctuation "*" 15369 . 15419) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 15413 . 15414) ("type" symbol "i" 15410 . 15411) ("name" symbol "cmp_le" 15402 . 15408)))) 15369 . 15419) (symbol "LCI_DATA_VECTOR_TYPE" 15369 . 15419) (symbol "LCI_MATH_EXPORT" 15369 . 15419) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15413 . 15414) ("type" symbol "i" 15410 . 15411) ("name" symbol "cmp_le" 15402 . 15408)))) 15369 . 15419) (VOID "void" 15369 . 15419) (symbol "LCI_MATH_EXPORT" 15369 . 15419) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15413 . 15414) ("type" symbol "i" 15410 . 15411) ("name" symbol "cmp_le" 15402 . 15408)))) 15369 . 15419) (punctuation "*" 15369 . 15419) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 15413 . 15414) ("type" symbol "i" 15410 . 15411) ("name" symbol "cmp_le" 15402 . 15408)))) 15369 . 15419) (symbol "LCI_DATA_VECTOR_TYPE" 15369 . 15419) (symbol "LCI_MATH_EXPORT" 15369 . 15419) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15363 . 15364) ("type" symbol "i" 15360 . 15361) ("name" symbol "cmp_lt" 15352 . 15358)))) 15319 . 15368) (VOID "void" 15319 . 15368) (symbol "LCI_MATH_EXPORT" 15319 . 15368) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15363 . 15364) ("type" symbol "i" 15360 . 15361) ("name" symbol "cmp_lt" 15352 . 15358)))) 15319 . 15368) (punctuation "*" 15319 . 15368) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 15363 . 15364) ("type" symbol "i" 15360 . 15361) ("name" symbol "cmp_lt" 15352 . 15358)))) 15319 . 15368) (symbol "LCI_DATA_VECTOR_TYPE" 15319 . 15368) (symbol "LCI_MATH_EXPORT" 15319 . 15368) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15363 . 15364) ("type" symbol "i" 15360 . 15361) ("name" symbol "cmp_lt" 15352 . 15358)))) 15319 . 15368) (VOID "void" 15319 . 15368) (symbol "LCI_MATH_EXPORT" 15319 . 15368) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15363 . 15364) ("type" symbol "i" 15360 . 15361) ("name" symbol "cmp_lt" 15352 . 15358)))) 15319 . 15368) (punctuation "*" 15319 . 15368) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 15363 . 15364) ("type" symbol "i" 15360 . 15361) ("name" symbol "cmp_lt" 15352 . 15358)))) 15319 . 15368) (symbol "LCI_DATA_VECTOR_TYPE" 15319 . 15368) (symbol "LCI_MATH_EXPORT" 15319 . 15368) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15312 . 15313) ("type" symbol "i" 15309 . 15310) ("name" symbol "cmp_ne" 15301 . 15307)))) 15268 . 15318) (VOID "void" 15268 . 15318) (symbol "LCI_MATH_EXPORT" 15268 . 15318) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15312 . 15313) ("type" symbol "i" 15309 . 15310) ("name" symbol "cmp_ne" 15301 . 15307)))) 15268 . 15318) (punctuation "*" 15268 . 15318) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 15312 . 15313) ("type" symbol "i" 15309 . 15310) ("name" symbol "cmp_ne" 15301 . 15307)))) 15268 . 15318) (symbol "LCI_DATA_VECTOR_TYPE" 15268 . 15318) (symbol "LCI_MATH_EXPORT" 15268 . 15318) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15312 . 15313) ("type" symbol "i" 15309 . 15310) ("name" symbol "cmp_ne" 15301 . 15307)))) 15268 . 15318) (VOID "void" 15268 . 15318) (symbol "LCI_MATH_EXPORT" 15268 . 15318) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15312 . 15313) ("type" symbol "i" 15309 . 15310) ("name" symbol "cmp_ne" 15301 . 15307)))) 15268 . 15318) (punctuation "*" 15268 . 15318) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 15312 . 15313) ("type" symbol "i" 15309 . 15310) ("name" symbol "cmp_ne" 15301 . 15307)))) 15268 . 15318) (symbol "LCI_DATA_VECTOR_TYPE" 15268 . 15318) (symbol "LCI_MATH_EXPORT" 15268 . 15318) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15261 . 15262) ("type" symbol "i" 15258 . 15259) ("name" symbol "cmp_eq" 15250 . 15256)))) 15217 . 15267) (VOID "void" 15217 . 15267) (symbol "LCI_MATH_EXPORT" 15217 . 15267) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15261 . 15262) ("type" symbol "i" 15258 . 15259) ("name" symbol "cmp_eq" 15250 . 15256)))) 15217 . 15267) (punctuation "*" 15217 . 15267) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 15261 . 15262) ("type" symbol "i" 15258 . 15259) ("name" symbol "cmp_eq" 15250 . 15256)))) 15217 . 15267) (symbol "LCI_DATA_VECTOR_TYPE" 15217 . 15267) (symbol "LCI_MATH_EXPORT" 15217 . 15267) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15261 . 15262) ("type" symbol "i" 15258 . 15259) ("name" symbol "cmp_eq" 15250 . 15256)))) 15217 . 15267) (VOID "void" 15217 . 15267) (symbol "LCI_MATH_EXPORT" 15217 . 15267) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15261 . 15262) ("type" symbol "i" 15258 . 15259) ("name" symbol "cmp_eq" 15250 . 15256)))) 15217 . 15267) (punctuation "*" 15217 . 15267) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 15261 . 15262) ("type" symbol "i" 15258 . 15259) ("name" symbol "cmp_eq" 15250 . 15256)))) 15217 . 15267) (symbol "LCI_DATA_VECTOR_TYPE" 15217 . 15267) (symbol "LCI_MATH_EXPORT" 15217 . 15267) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = op vptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = op *vptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15211 . 15212) ("type" symbol "i" 15208 . 15209) ("name" symbol "not" 15203 . 15206)))) 15171 . 15216) (VOID "void" 15171 . 15216) (symbol "LCI_MATH_EXPORT" 15171 . 15216) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = op vptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = op *vptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15211 . 15212) ("type" symbol "i" 15208 . 15209) ("name" symbol "not" 15203 . 15206)))) 15171 . 15216) (punctuation "*" 15171 . 15216) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 15211 . 15212) ("type" symbol "i" 15208 . 15209) ("name" symbol "not" 15203 . 15206)))) 15171 . 15216) (symbol "LCI_DATA_VECTOR_TYPE" 15171 . 15216) (symbol "LCI_MATH_EXPORT" 15171 . 15216) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15164 . 15165) ("type" symbol "i" 15161 . 15162) ("name" symbol "or" 15157 . 15159)))) 15124 . 15170) (VOID "void" 15124 . 15170) (symbol "LCI_MATH_EXPORT" 15124 . 15170) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15164 . 15165) ("type" symbol "i" 15161 . 15162) ("name" symbol "or" 15157 . 15159)))) 15124 . 15170) (punctuation "*" 15124 . 15170) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 15164 . 15165) ("type" symbol "i" 15161 . 15162) ("name" symbol "or" 15157 . 15159)))) 15124 . 15170) (symbol "LCI_DATA_VECTOR_TYPE" 15124 . 15170) (symbol "LCI_MATH_EXPORT" 15124 . 15170) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15164 . 15165) ("type" symbol "i" 15161 . 15162) ("name" symbol "or" 15157 . 15159)))) 15124 . 15170) (VOID "void" 15124 . 15170) (symbol "LCI_MATH_EXPORT" 15124 . 15170) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15164 . 15165) ("type" symbol "i" 15161 . 15162) ("name" symbol "or" 15157 . 15159)))) 15124 . 15170) (punctuation "*" 15124 . 15170) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 15164 . 15165) ("type" symbol "i" 15161 . 15162) ("name" symbol "or" 15157 . 15159)))) 15124 . 15170) (symbol "LCI_DATA_VECTOR_TYPE" 15124 . 15170) (symbol "LCI_MATH_EXPORT" 15124 . 15170) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15117 . 15118) ("type" symbol "i" 15114 . 15115) ("name" symbol "and" 15109 . 15112)))) 15076 . 15123) (VOID "void" 15076 . 15123) (symbol "LCI_MATH_EXPORT" 15076 . 15123) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15117 . 15118) ("type" symbol "i" 15114 . 15115) ("name" symbol "and" 15109 . 15112)))) 15076 . 15123) (punctuation "*" 15076 . 15123) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 15117 . 15118) ("type" symbol "i" 15114 . 15115) ("name" symbol "and" 15109 . 15112)))) 15076 . 15123) (symbol "LCI_DATA_VECTOR_TYPE" 15076 . 15123) (symbol "LCI_MATH_EXPORT" 15076 . 15123) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15117 . 15118) ("type" symbol "i" 15114 . 15115) ("name" symbol "and" 15109 . 15112)))) 15076 . 15123) (VOID "void" 15076 . 15123) (symbol "LCI_MATH_EXPORT" 15076 . 15123) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15117 . 15118) ("type" symbol "i" 15114 . 15115) ("name" symbol "and" 15109 . 15112)))) 15076 . 15123) (punctuation "*" 15076 . 15123) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 15117 . 15118) ("type" symbol "i" 15114 . 15115) ("name" symbol "and" 15109 . 15112)))) 15076 . 15123) (symbol "LCI_DATA_VECTOR_TYPE" 15076 . 15123) (symbol "LCI_MATH_EXPORT" 15076 . 15123) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15069 . 15070) ("type" symbol "i" 15066 . 15067) ("name" symbol "shr" 15061 . 15064)))) 15028 . 15075) (VOID "void" 15028 . 15075) (symbol "LCI_MATH_EXPORT" 15028 . 15075) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15069 . 15070) ("type" symbol "i" 15066 . 15067) ("name" symbol "shr" 15061 . 15064)))) 15028 . 15075) (punctuation "*" 15028 . 15075) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 15069 . 15070) ("type" symbol "i" 15066 . 15067) ("name" symbol "shr" 15061 . 15064)))) 15028 . 15075) (symbol "LCI_DATA_VECTOR_TYPE" 15028 . 15075) (symbol "LCI_MATH_EXPORT" 15028 . 15075) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15069 . 15070) ("type" symbol "i" 15066 . 15067) ("name" symbol "shr" 15061 . 15064)))) 15028 . 15075) (VOID "void" 15028 . 15075) (symbol "LCI_MATH_EXPORT" 15028 . 15075) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15069 . 15070) ("type" symbol "i" 15066 . 15067) ("name" symbol "shr" 15061 . 15064)))) 15028 . 15075) (punctuation "*" 15028 . 15075) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 15069 . 15070) ("type" symbol "i" 15066 . 15067) ("name" symbol "shr" 15061 . 15064)))) 15028 . 15075) (symbol "LCI_DATA_VECTOR_TYPE" 15028 . 15075) (symbol "LCI_MATH_EXPORT" 15028 . 15075) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15021 . 15022) ("type" symbol "i" 15018 . 15019) ("name" symbol "shl" 15013 . 15016)))) 14980 . 15027) (VOID "void" 14980 . 15027) (symbol "LCI_MATH_EXPORT" 14980 . 15027) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15021 . 15022) ("type" symbol "i" 15018 . 15019) ("name" symbol "shl" 15013 . 15016)))) 14980 . 15027) (punctuation "*" 14980 . 15027) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 15021 . 15022) ("type" symbol "i" 15018 . 15019) ("name" symbol "shl" 15013 . 15016)))) 14980 . 15027) (symbol "LCI_DATA_VECTOR_TYPE" 14980 . 15027) (symbol "LCI_MATH_EXPORT" 14980 . 15027) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15021 . 15022) ("type" symbol "i" 15018 . 15019) ("name" symbol "shl" 15013 . 15016)))) 14980 . 15027) (VOID "void" 14980 . 15027) (symbol "LCI_MATH_EXPORT" 14980 . 15027) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 15021 . 15022) ("type" symbol "i" 15018 . 15019) ("name" symbol "shl" 15013 . 15016)))) 14980 . 15027) (punctuation "*" 14980 . 15027) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 15021 . 15022) ("type" symbol "i" 15018 . 15019) ("name" symbol "shl" 15013 . 15016)))) 14980 . 15027) (symbol "LCI_DATA_VECTOR_TYPE" 14980 . 15027) (symbol "LCI_MATH_EXPORT" 14980 . 15027) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = op vptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = op *vptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14974 . 14975) ("type" symbol "i" 14971 . 14972) ("name" symbol "compl" 14964 . 14969)))) 14932 . 14979) (VOID "void" 14932 . 14979) (symbol "LCI_MATH_EXPORT" 14932 . 14979) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = op vptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = op *vptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14974 . 14975) ("type" symbol "i" 14971 . 14972) ("name" symbol "compl" 14964 . 14969)))) 14932 . 14979) (punctuation "*" 14932 . 14979) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 14974 . 14975) ("type" symbol "i" 14971 . 14972) ("name" symbol "compl" 14964 . 14969)))) 14932 . 14979) (symbol "LCI_DATA_VECTOR_TYPE" 14932 . 14979) (symbol "LCI_MATH_EXPORT" 14932 . 14979) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14926 . 14927) ("type" symbol "i" 14923 . 14924) ("name" symbol "xor" 14918 . 14921)))) 14885 . 14931) (VOID "void" 14885 . 14931) (symbol "LCI_MATH_EXPORT" 14885 . 14931) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14926 . 14927) ("type" symbol "i" 14923 . 14924) ("name" symbol "xor" 14918 . 14921)))) 14885 . 14931) (punctuation "*" 14885 . 14931) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 14926 . 14927) ("type" symbol "i" 14923 . 14924) ("name" symbol "xor" 14918 . 14921)))) 14885 . 14931) (symbol "LCI_DATA_VECTOR_TYPE" 14885 . 14931) (symbol "LCI_MATH_EXPORT" 14885 . 14931) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14926 . 14927) ("type" symbol "i" 14923 . 14924) ("name" symbol "xor" 14918 . 14921)))) 14885 . 14931) (VOID "void" 14885 . 14931) (symbol "LCI_MATH_EXPORT" 14885 . 14931) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14926 . 14927) ("type" symbol "i" 14923 . 14924) ("name" symbol "xor" 14918 . 14921)))) 14885 . 14931) (punctuation "*" 14885 . 14931) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 14926 . 14927) ("type" symbol "i" 14923 . 14924) ("name" symbol "xor" 14918 . 14921)))) 14885 . 14931) (symbol "LCI_DATA_VECTOR_TYPE" 14885 . 14931) (symbol "LCI_MATH_EXPORT" 14885 . 14931) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14879 . 14880) ("type" symbol "i" 14876 . 14877) ("name" symbol "bitor" 14869 . 14874)))) 14836 . 14884) (VOID "void" 14836 . 14884) (symbol "LCI_MATH_EXPORT" 14836 . 14884) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14879 . 14880) ("type" symbol "i" 14876 . 14877) ("name" symbol "bitor" 14869 . 14874)))) 14836 . 14884) (punctuation "*" 14836 . 14884) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 14879 . 14880) ("type" symbol "i" 14876 . 14877) ("name" symbol "bitor" 14869 . 14874)))) 14836 . 14884) (symbol "LCI_DATA_VECTOR_TYPE" 14836 . 14884) (symbol "LCI_MATH_EXPORT" 14836 . 14884) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14879 . 14880) ("type" symbol "i" 14876 . 14877) ("name" symbol "bitor" 14869 . 14874)))) 14836 . 14884) (VOID "void" 14836 . 14884) (symbol "LCI_MATH_EXPORT" 14836 . 14884) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14879 . 14880) ("type" symbol "i" 14876 . 14877) ("name" symbol "bitor" 14869 . 14874)))) 14836 . 14884) (punctuation "*" 14836 . 14884) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 14879 . 14880) ("type" symbol "i" 14876 . 14877) ("name" symbol "bitor" 14869 . 14874)))) 14836 . 14884) (symbol "LCI_DATA_VECTOR_TYPE" 14836 . 14884) (symbol "LCI_MATH_EXPORT" 14836 . 14884) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14830 . 14831) ("type" symbol "i" 14827 . 14828) ("name" symbol "bitand" 14819 . 14825)))) 14786 . 14835) (VOID "void" 14786 . 14835) (symbol "LCI_MATH_EXPORT" 14786 . 14835) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14830 . 14831) ("type" symbol "i" 14827 . 14828) ("name" symbol "bitand" 14819 . 14825)))) 14786 . 14835) (punctuation "*" 14786 . 14835) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 14830 . 14831) ("type" symbol "i" 14827 . 14828) ("name" symbol "bitand" 14819 . 14825)))) 14786 . 14835) (symbol "LCI_DATA_VECTOR_TYPE" 14786 . 14835) (symbol "LCI_MATH_EXPORT" 14786 . 14835) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14830 . 14831) ("type" symbol "i" 14827 . 14828) ("name" symbol "bitand" 14819 . 14825)))) 14786 . 14835) (VOID "void" 14786 . 14835) (symbol "LCI_MATH_EXPORT" 14786 . 14835) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14830 . 14831) ("type" symbol "i" 14827 . 14828) ("name" symbol "bitand" 14819 . 14825)))) 14786 . 14835) (punctuation "*" 14786 . 14835) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 14830 . 14831) ("type" symbol "i" 14827 . 14828) ("name" symbol "bitand" 14819 . 14825)))) 14786 . 14835) (symbol "LCI_DATA_VECTOR_TYPE" 14786 . 14835) (symbol "LCI_MATH_EXPORT" 14786 . 14835) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = op vptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = op *vptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14780 . 14781) ("type" symbol "i" 14777 . 14778) ("name" symbol "neg" 14772 . 14775)))) 14740 . 14785) (VOID "void" 14740 . 14785) (symbol "LCI_MATH_EXPORT" 14740 . 14785) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = op vptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = op *vptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14780 . 14781) ("type" symbol "i" 14777 . 14778) ("name" symbol "neg" 14772 . 14775)))) 14740 . 14785) (punctuation "*" 14740 . 14785) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 14780 . 14781) ("type" symbol "i" 14777 . 14778) ("name" symbol "neg" 14772 . 14775)))) 14740 . 14785) (symbol "LCI_DATA_VECTOR_TYPE" 14740 . 14785) (symbol "LCI_MATH_EXPORT" 14740 . 14785) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14734 . 14735) ("type" symbol "i" 14731 . 14732) ("name" symbol "mod" 14726 . 14729)))) 14693 . 14739) (VOID "void" 14693 . 14739) (symbol "LCI_MATH_EXPORT" 14693 . 14739) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14734 . 14735) ("type" symbol "i" 14731 . 14732) ("name" symbol "mod" 14726 . 14729)))) 14693 . 14739) (punctuation "*" 14693 . 14739) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 14734 . 14735) ("type" symbol "i" 14731 . 14732) ("name" symbol "mod" 14726 . 14729)))) 14693 . 14739) (symbol "LCI_DATA_VECTOR_TYPE" 14693 . 14739) (symbol "LCI_MATH_EXPORT" 14693 . 14739) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14734 . 14735) ("type" symbol "i" 14731 . 14732) ("name" symbol "mod" 14726 . 14729)))) 14693 . 14739) (VOID "void" 14693 . 14739) (symbol "LCI_MATH_EXPORT" 14693 . 14739) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14734 . 14735) ("type" symbol "i" 14731 . 14732) ("name" symbol "mod" 14726 . 14729)))) 14693 . 14739) (punctuation "*" 14693 . 14739) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 14734 . 14735) ("type" symbol "i" 14731 . 14732) ("name" symbol "mod" 14726 . 14729)))) 14693 . 14739) (symbol "LCI_DATA_VECTOR_TYPE" 14693 . 14739) (symbol "LCI_MATH_EXPORT" 14693 . 14739) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14687 . 14688) ("type" symbol "i" 14684 . 14685) ("name" symbol "div" 14679 . 14682)))) 14646 . 14692) (VOID "void" 14646 . 14692) (symbol "LCI_MATH_EXPORT" 14646 . 14692) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14687 . 14688) ("type" symbol "i" 14684 . 14685) ("name" symbol "div" 14679 . 14682)))) 14646 . 14692) (punctuation "*" 14646 . 14692) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 14687 . 14688) ("type" symbol "i" 14684 . 14685) ("name" symbol "div" 14679 . 14682)))) 14646 . 14692) (symbol "LCI_DATA_VECTOR_TYPE" 14646 . 14692) (symbol "LCI_MATH_EXPORT" 14646 . 14692) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14687 . 14688) ("type" symbol "i" 14684 . 14685) ("name" symbol "div" 14679 . 14682)))) 14646 . 14692) (VOID "void" 14646 . 14692) (symbol "LCI_MATH_EXPORT" 14646 . 14692) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14687 . 14688) ("type" symbol "i" 14684 . 14685) ("name" symbol "div" 14679 . 14682)))) 14646 . 14692) (punctuation "*" 14646 . 14692) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 14687 . 14688) ("type" symbol "i" 14684 . 14685) ("name" symbol "div" 14679 . 14682)))) 14646 . 14692) (symbol "LCI_DATA_VECTOR_TYPE" 14646 . 14692) (symbol "LCI_MATH_EXPORT" 14646 . 14692) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14640 . 14641) ("type" symbol "i" 14637 . 14638) ("name" symbol "mul" 14632 . 14635)))) 14599 . 14645) (VOID "void" 14599 . 14645) (symbol "LCI_MATH_EXPORT" 14599 . 14645) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14640 . 14641) ("type" symbol "i" 14637 . 14638) ("name" symbol "mul" 14632 . 14635)))) 14599 . 14645) (punctuation "*" 14599 . 14645) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 14640 . 14641) ("type" symbol "i" 14637 . 14638) ("name" symbol "mul" 14632 . 14635)))) 14599 . 14645) (symbol "LCI_DATA_VECTOR_TYPE" 14599 . 14645) (symbol "LCI_MATH_EXPORT" 14599 . 14645) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14640 . 14641) ("type" symbol "i" 14637 . 14638) ("name" symbol "mul" 14632 . 14635)))) 14599 . 14645) (VOID "void" 14599 . 14645) (symbol "LCI_MATH_EXPORT" 14599 . 14645) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14640 . 14641) ("type" symbol "i" 14637 . 14638) ("name" symbol "mul" 14632 . 14635)))) 14599 . 14645) (punctuation "*" 14599 . 14645) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 14640 . 14641) ("type" symbol "i" 14637 . 14638) ("name" symbol "mul" 14632 . 14635)))) 14599 . 14645) (symbol "LCI_DATA_VECTOR_TYPE" 14599 . 14645) (symbol "LCI_MATH_EXPORT" 14599 . 14645) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14593 . 14594) ("type" symbol "i" 14590 . 14591) ("name" symbol "sub" 14585 . 14588)))) 14552 . 14598) (VOID "void" 14552 . 14598) (symbol "LCI_MATH_EXPORT" 14552 . 14598) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14593 . 14594) ("type" symbol "i" 14590 . 14591) ("name" symbol "sub" 14585 . 14588)))) 14552 . 14598) (punctuation "*" 14552 . 14598) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 14593 . 14594) ("type" symbol "i" 14590 . 14591) ("name" symbol "sub" 14585 . 14588)))) 14552 . 14598) (symbol "LCI_DATA_VECTOR_TYPE" 14552 . 14598) (symbol "LCI_MATH_EXPORT" 14552 . 14598) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14593 . 14594) ("type" symbol "i" 14590 . 14591) ("name" symbol "sub" 14585 . 14588)))) 14552 . 14598) (VOID "void" 14552 . 14598) (symbol "LCI_MATH_EXPORT" 14552 . 14598) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14593 . 14594) ("type" symbol "i" 14590 . 14591) ("name" symbol "sub" 14585 . 14588)))) 14552 . 14598) (punctuation "*" 14552 . 14598) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 14593 . 14594) ("type" symbol "i" 14590 . 14591) ("name" symbol "sub" 14585 . 14588)))) 14552 . 14598) (symbol "LCI_DATA_VECTOR_TYPE" 14552 . 14598) (symbol "LCI_MATH_EXPORT" 14552 . 14598) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (a->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride) \\
				*aptr = *aptr op b; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14546 . 14547) ("type" symbol "i" 14543 . 14544) ("name" symbol "add" 14538 . 14541)))) 14505 . 14551) (VOID "void" 14505 . 14551) (symbol "LCI_MATH_EXPORT" 14505 . 14551) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op b; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride) \\
				*rptr = *aptr op b; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14546 . 14547) ("type" symbol "i" 14543 . 14544) ("name" symbol "add" 14538 . 14541)))) 14505 . 14551) (punctuation "*" 14505 . 14551) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 14546 . 14547) ("type" symbol "i" 14543 . 14544) ("name" symbol "add" 14538 . 14541)))) 14505 . 14551) (symbol "LCI_DATA_VECTOR_TYPE" 14505 . 14551) (symbol "LCI_MATH_EXPORT" 14505 . 14551) (semantic-list #("{ \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < a->size; i++) \\
				aptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *aend = a->start \\
				+ a->size * a->stride; \\
			for (; aptr != aend; aptr += a->stride, \\
					bptr += b->stride) \\
				*aptr = *aptr op *bptr; \\
		} \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14546 . 14547) ("type" symbol "i" 14543 . 14544) ("name" symbol "add" 14538 . 14541)))) 14505 . 14551) (VOID "void" 14505 . 14551) (symbol "LCI_MATH_EXPORT" 14505 . 14551) (semantic-list #("{ \\
		assert(res); \\
		assert(a); \\
		assert(a->start); \\
		assert(b); \\
		assert(b->start); \\
		assert(a->size == b->size); \\
	\\
		res = LCI_DATA_VECTOR_NAME(result_type, init)(res, a->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(a)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(result_type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *aptr = a->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *bptr = b->start; \\
		if (a->stride == 1 && b->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = aptr[i] op bptr[i]; \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(result_type) *rend = res->start \\
				+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					aptr += a->stride, bptr += b->stride) \\
				*rptr = *aptr op *bptr; \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("op") ("result_type" symbol "i" 14546 . 14547) ("type" symbol "i" 14543 . 14544) ("name" symbol "add" 14538 . 14541)))) 14505 . 14551) (punctuation "*" 14505 . 14551) (semantic-list #("(result_type)" 0 1 (macros (("op") ("result_type" symbol "i" 14546 . 14547) ("type" symbol "i" 14543 . 14544) ("name" symbol "add" 14538 . 14541)))) 14505 . 14551) (symbol "LCI_DATA_VECTOR_TYPE" 14505 . 14551) (symbol "LCI_MATH_EXPORT" 14505 . 14551) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
		assert(func); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) { \\
				va_list aq; \\
				va_copy(aq, ap); \\
				vptr[i] = func(vptr[i], aq); \\
				va_end(aq); \\
			} \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) { \\
				va_list aq; \\
				va_copy(aq, ap); \\
				*vptr = func(*vptr, aq); \\
				va_end(aq); \\
			} \\
		} \\
	}" 0 1 (macros (("type" symbol "c" 5140 . 5141)))) 5117 . 5142) (VOID "void" 5117 . 5142) (symbol "LCI_MATH_EXPORT" 5117 . 5142) (semantic-list #("{ \\
		va_list ap; \\
		va_start(ap, func); \\
		LCI_DATA_VECTOR_NAME(type, apply_varg_in)(vec, func, ap); \\
		va_end(ap); \\
	}" 0 1 (macros (("type" symbol "c" 5140 . 5141)))) 5117 . 5142) (VOID "void" 5117 . 5142) (symbol "LCI_MATH_EXPORT" 5117 . 5142) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
		assert(func); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("type" symbol "c" 5140 . 5141)))) 5117 . 5142) (VOID "void" 5117 . 5142) (symbol "LCI_MATH_EXPORT" 5117 . 5142) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
		assert(func); \\
	\\
		res = LCI_DATA_VECTOR_NAME(type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) { \\
				va_list aq; \\
				va_copy(aq, ap); \\
				rptr[i] = func(vptr[i], ap); \\
				va_end(aq); \\
			} \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) { \\
				va_list aq; \\
				va_copy(aq, ap); \\
				*rptr = func(*vptr, ap); \\
				va_end(aq); \\
			} \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("type" symbol "c" 5140 . 5141)))) 5117 . 5142) (punctuation "*" 5117 . 5142) (semantic-list #("(type)" 0 1 (macros (("type" symbol "c" 5140 . 5141)))) 5117 . 5142) (symbol "LCI_DATA_VECTOR_TYPE" 5117 . 5142) (symbol "LCI_MATH_EXPORT" 5117 . 5142) (semantic-list #("{ \\
		va_list ap; \\
		va_start(ap, func); \\
		res = LCI_DATA_VECTOR_NAME(type, apply_varg)(res, vec, func, \\
				ap); \\
		va_end(ap); \\
		return res; \\
	}" 0 1 (macros (("type" symbol "c" 5140 . 5141)))) 5117 . 5142) (punctuation "*" 5117 . 5142) (semantic-list #("(type)" 0 1 (macros (("type" symbol "c" 5140 . 5141)))) 5117 . 5142) (symbol "LCI_DATA_VECTOR_TYPE" 5117 . 5142) (symbol "LCI_MATH_EXPORT" 5117 . 5142) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
		assert(func); \\
	\\
		res = LCI_DATA_VECTOR_NAME(type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("type" symbol "c" 5140 . 5141)))) 5117 . 5142) (punctuation "*" 5117 . 5142) (semantic-list #("(type)" 0 1 (macros (("type" symbol "c" 5140 . 5141)))) 5117 . 5142) (symbol "LCI_DATA_VECTOR_TYPE" 5117 . 5142) (symbol "LCI_MATH_EXPORT" 5117 . 5142) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) sum = 0; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				sum += vptr[i]; \\
		} else { \\
			const LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				sum += *vptr; \\
		} \\
	\\
		return sum; \\
	}" 0 1 (macros (("type" symbol "c" 5140 . 5141)))) 5117 . 5142) (semantic-list #("(type)" 0 1 (macros (("type" symbol "c" 5140 . 5141)))) 5117 . 5142) (symbol "LCI_DATA_SCALAR_TYPE" 5117 . 5142) (symbol "LCI_MATH_EXPORT" 5117 . 5142) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
		assert(func); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) { \\
				va_list aq; \\
				va_copy(aq, ap); \\
				vptr[i] = func(vptr[i], aq); \\
				va_end(aq); \\
			} \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) { \\
				va_list aq; \\
				va_copy(aq, ap); \\
				*vptr = func(*vptr, aq); \\
				va_end(aq); \\
			} \\
		} \\
	}" 0 1 (macros (("type" symbol "f" 5114 . 5115)))) 5091 . 5116) (VOID "void" 5091 . 5116) (symbol "LCI_MATH_EXPORT" 5091 . 5116) (semantic-list #("{ \\
		va_list ap; \\
		va_start(ap, func); \\
		LCI_DATA_VECTOR_NAME(type, apply_varg_in)(vec, func, ap); \\
		va_end(ap); \\
	}" 0 1 (macros (("type" symbol "f" 5114 . 5115)))) 5091 . 5116) (VOID "void" 5091 . 5116) (symbol "LCI_MATH_EXPORT" 5091 . 5116) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
		assert(func); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("type" symbol "f" 5114 . 5115)))) 5091 . 5116) (VOID "void" 5091 . 5116) (symbol "LCI_MATH_EXPORT" 5091 . 5116) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
		assert(func); \\
	\\
		res = LCI_DATA_VECTOR_NAME(type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) { \\
				va_list aq; \\
				va_copy(aq, ap); \\
				rptr[i] = func(vptr[i], ap); \\
				va_end(aq); \\
			} \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) { \\
				va_list aq; \\
				va_copy(aq, ap); \\
				*rptr = func(*vptr, ap); \\
				va_end(aq); \\
			} \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("type" symbol "f" 5114 . 5115)))) 5091 . 5116) (punctuation "*" 5091 . 5116) (semantic-list #("(type)" 0 1 (macros (("type" symbol "f" 5114 . 5115)))) 5091 . 5116) (symbol "LCI_DATA_VECTOR_TYPE" 5091 . 5116) (symbol "LCI_MATH_EXPORT" 5091 . 5116) (semantic-list #("{ \\
		va_list ap; \\
		va_start(ap, func); \\
		res = LCI_DATA_VECTOR_NAME(type, apply_varg)(res, vec, func, \\
				ap); \\
		va_end(ap); \\
		return res; \\
	}" 0 1 (macros (("type" symbol "f" 5114 . 5115)))) 5091 . 5116) (punctuation "*" 5091 . 5116) (semantic-list #("(type)" 0 1 (macros (("type" symbol "f" 5114 . 5115)))) 5091 . 5116) (symbol "LCI_DATA_VECTOR_TYPE" 5091 . 5116) (symbol "LCI_MATH_EXPORT" 5091 . 5116) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
		assert(func); \\
	\\
		res = LCI_DATA_VECTOR_NAME(type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("type" symbol "f" 5114 . 5115)))) 5091 . 5116) (punctuation "*" 5091 . 5116) (semantic-list #("(type)" 0 1 (macros (("type" symbol "f" 5114 . 5115)))) 5091 . 5116) (symbol "LCI_DATA_VECTOR_TYPE" 5091 . 5116) (symbol "LCI_MATH_EXPORT" 5091 . 5116) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) sum = 0; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				sum += vptr[i]; \\
		} else { \\
			const LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				sum += *vptr; \\
		} \\
	\\
		return sum; \\
	}" 0 1 (macros (("type" symbol "f" 5114 . 5115)))) 5091 . 5116) (semantic-list #("(type)" 0 1 (macros (("type" symbol "f" 5114 . 5115)))) 5091 . 5116) (symbol "LCI_DATA_SCALAR_TYPE" 5091 . 5116) (symbol "LCI_MATH_EXPORT" 5091 . 5116) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
		assert(func); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) { \\
				va_list aq; \\
				va_copy(aq, ap); \\
				vptr[i] = func(vptr[i], aq); \\
				va_end(aq); \\
			} \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) { \\
				va_list aq; \\
				va_copy(aq, ap); \\
				*vptr = func(*vptr, aq); \\
				va_end(aq); \\
			} \\
		} \\
	}" 0 1 (macros (("type" symbol "i" 5088 . 5089)))) 5065 . 5090) (VOID "void" 5065 . 5090) (symbol "LCI_MATH_EXPORT" 5065 . 5090) (semantic-list #("{ \\
		va_list ap; \\
		va_start(ap, func); \\
		LCI_DATA_VECTOR_NAME(type, apply_varg_in)(vec, func, ap); \\
		va_end(ap); \\
	}" 0 1 (macros (("type" symbol "i" 5088 . 5089)))) 5065 . 5090) (VOID "void" 5065 . 5090) (symbol "LCI_MATH_EXPORT" 5065 . 5090) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
		assert(func); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				vptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				*vptr = func(*vptr); \\
		} \\
	}" 0 1 (macros (("type" symbol "i" 5088 . 5089)))) 5065 . 5090) (VOID "void" 5065 . 5090) (symbol "LCI_MATH_EXPORT" 5065 . 5090) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
		assert(func); \\
	\\
		res = LCI_DATA_VECTOR_NAME(type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) { \\
				va_list aq; \\
				va_copy(aq, ap); \\
				rptr[i] = func(vptr[i], ap); \\
				va_end(aq); \\
			} \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) { \\
				va_list aq; \\
				va_copy(aq, ap); \\
				*rptr = func(*vptr, ap); \\
				va_end(aq); \\
			} \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("type" symbol "i" 5088 . 5089)))) 5065 . 5090) (punctuation "*" 5065 . 5090) (semantic-list #("(type)" 0 1 (macros (("type" symbol "i" 5088 . 5089)))) 5065 . 5090) (symbol "LCI_DATA_VECTOR_TYPE" 5065 . 5090) (symbol "LCI_MATH_EXPORT" 5065 . 5090) (semantic-list #("{ \\
		va_list ap; \\
		va_start(ap, func); \\
		res = LCI_DATA_VECTOR_NAME(type, apply_varg)(res, vec, func, \\
				ap); \\
		va_end(ap); \\
		return res; \\
	}" 0 1 (macros (("type" symbol "i" 5088 . 5089)))) 5065 . 5090) (punctuation "*" 5065 . 5090) (semantic-list #("(type)" 0 1 (macros (("type" symbol "i" 5088 . 5089)))) 5065 . 5090) (symbol "LCI_DATA_VECTOR_TYPE" 5065 . 5090) (symbol "LCI_MATH_EXPORT" 5065 . 5090) (semantic-list #("{ \\
		assert(res); \\
		assert(vec); \\
		assert(vec->start); \\
		assert(func); \\
	\\
		res = LCI_DATA_VECTOR_NAME(type, init)(res, vec->size, \\
				*LCI_DATA_VECTOR_NAME(type, array)(vec)); \\
		if (unlikely(!res)) \\
			return NULL; \\
	\\
		LCI_DATA_SCALAR_TYPE(type) *rptr = res->start; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (res->stride == 1) { \\
			for (size_t i = 0; i < res->size; i++) \\
				rptr[i] = func(vptr[i]); \\
		} else { \\
			LCI_DATA_SCALAR_TYPE(type) *rend = res->start \\
					+ res->size * res->stride; \\
			for (; rptr != rend; rptr += res->stride, \\
					vptr += vec->stride) \\
				*rptr = func(*vptr); \\
		} \\
	\\
		return res; \\
	}" 0 1 (macros (("type" symbol "i" 5088 . 5089)))) 5065 . 5090) (punctuation "*" 5065 . 5090) (semantic-list #("(type)" 0 1 (macros (("type" symbol "i" 5088 . 5089)))) 5065 . 5090) (symbol "LCI_DATA_VECTOR_TYPE" 5065 . 5090) (symbol "LCI_MATH_EXPORT" 5065 . 5090) (semantic-list #("{ \\
		assert(vec); \\
		assert(vec->start); \\
	\\
		LCI_DATA_SCALAR_TYPE(type) sum = 0; \\
		const LCI_DATA_SCALAR_TYPE(type) *vptr = vec->start; \\
		if (vec->stride == 1) { \\
			for (size_t i = 0; i < vec->size; i++) \\
				sum += vptr[i]; \\
		} else { \\
			const LCI_DATA_SCALAR_TYPE(type) *vend = vec->start \\
					+ vec->size * vec->stride; \\
			for (; vptr != vend; vptr += vec->stride) \\
				sum += *vptr; \\
		} \\
	\\
		return sum; \\
	}" 0 1 (macros (("type" symbol "i" 5088 . 5089)))) 5065 . 5090) (semantic-list #("(type)" 0 1 (macros (("type" symbol "i" 5088 . 5089)))) 5065 . 5090) (symbol "LCI_DATA_SCALAR_TYPE" 5065 . 5090) (symbol "LCI_MATH_EXPORT" 5065 . 5090))
    )
   (semanticdb-table "Makefile.am"
    :major-mode 'makefile-automake-mode
    :tags 
        '( ("AM_CPPFLAGS" variable (:default-value ("-I$(top_srcdir)/include")) nil [1 39])
            ("lib_LTLIBRARIES" variable (:default-value ("liblci-math.la")) nil [40 73])
            ("liblci_math_la_LDFLAGS" variable (:default-value ("-version-number" "0:1:0" "-no-undefined")) nil [74 135])
            ("liblci_math_la_SOURCES" variable (:default-value ("blas.c" "lapack.c" "lci-math.h" "matrix.c" "moment.c" "rand.c" "vector.c")) nil [136 243])
            ("liblci_math_la_CFLAGS" variable (:default-value ("${lci_util_CFLAGS}" "${lci_data_CFLAGS}")) nil [244 312])
            ("liblci_math_la_LIBADD" variable (:default-value ("-lm" "${lci_util_LIBS}" "${lci_data_LIBS}" "${CBLAS_LIBS}" "${LAPACKE_LIBS}")) nil [313 420]))          
    :file "Makefile.am"
    :pointmax 421
    :fsize 420
    :lastmodtime '(21351 15210 272977 466000)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "lci-math.h"
    :file "lci-math.h"
    :fsize 358
    :lastmodtime '(21351 15210 264973 566000)
    )
   )
  :file "!home!andrea!Workspace!LCI!liblci-math!trunk!src!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )
